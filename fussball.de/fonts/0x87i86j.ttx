<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.55">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="zero"/>
    <GlyphID id="2" name="one"/>
    <GlyphID id="3" name="two"/>
    <GlyphID id="4" name="three"/>
    <GlyphID id="5" name="four"/>
    <GlyphID id="6" name="five"/>
    <GlyphID id="7" name="six"/>
    <GlyphID id="8" name="seven"/>
    <GlyphID id="9" name="eight"/>
    <GlyphID id="10" name="nine"/>
    <GlyphID id="11" name="hyphen"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="1.0"/>
    <checkSumAdjustment value="0xff4134d5"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00001011"/>
    <unitsPerEm value="1000"/>
    <created value="Thu Jun 26 11:30:00 2014"/>
    <modified value="Tue Jul  1 16:24:41 2014"/>
    <xMin value="-240"/>
    <yMin value="-249"/>
    <xMax value="7093"/>
    <yMax value="910"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="9"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="850"/>
    <descent value="-150"/>
    <lineGap value="100"/>
    <advanceWidthMax value="700"/>
    <minLeftSideBearing value="-240"/>
    <minRightSideBearing value="-150"/>
    <xMaxExtent value="7093"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="12"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="12"/>
    <maxPoints value="363"/>
    <maxContours value="15"/>
    <maxCompositePoints value="89"/>
    <maxCompositeContours value="4"/>
    <maxZones value="1"/>
    <maxTwilightPoints value="0"/>
    <maxStorage value="0"/>
    <maxFunctionDefs value="10"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="512"/>
    <maxSizeOfInstructions value="1589"/>
    <maxComponentElements value="3"/>
    <maxComponentDepth value="1"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="637"/>
    <usWeightClass value="700"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000100"/>
    <ySubscriptXSize value="700"/>
    <ySubscriptYSize value="650"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="140"/>
    <ySuperscriptXSize value="700"/>
    <ySuperscriptYSize value="650"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="477"/>
    <yStrikeoutSize value="50"/>
    <yStrikeoutPosition value="250"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="0"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="10100000 00000000 00000000 01101111"/>
    <ulUnicodeRange2 value="00010000 00000000 00000000 01001010"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="pyrs"/>
    <fsSelection value="00000000 11000000"/>
    <usFirstCharIndex value="0"/>
    <usLastCharIndex value="57648"/>
    <sTypoAscender value="850"/>
    <sTypoDescender value="-150"/>
    <sTypoLineGap value="100"/>
    <usWinAscent value="850"/>
    <usWinDescent value="250"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 00010010"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="550"/>
    <sCapHeight value="700"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="3"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="220" lsb="0"/>
    <mtx name="eight" width="695" lsb="60"/>
    <mtx name="five" width="676" lsb="60"/>
    <mtx name="four" width="700" lsb="25"/>
    <mtx name="hyphen" width="535" lsb="80"/>
    <mtx name="nine" width="683" lsb="60"/>
    <mtx name="one" width="528" lsb="40"/>
    <mtx name="seven" width="641" lsb="40"/>
    <mtx name="six" width="683" lsb="60"/>
    <mtx name="three" width="695" lsb="60"/>
    <mtx name="two" width="678" lsb="60"/>
    <mtx name="zero" width="695" lsb="60"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0xe650" name="seven"/><!-- ???? -->
      <map code="0xe651" name="three"/><!-- ???? -->
      <map code="0xe652" name="zero"/><!-- ???? -->
      <map code="0xe653" name="two"/><!-- ???? -->
      <map code="0xe654" name="eight"/><!-- ???? -->
      <map code="0xe655" name="five"/><!-- ???? -->
      <map code="0xe656" name="four"/><!-- ???? -->
      <map code="0xe657" name="six"/><!-- ???? -->
      <map code="0xe658" name="three"/><!-- ???? -->
      <map code="0xe659" name="hyphen"/><!-- ???? -->
      <map code="0xe65a" name="two"/><!-- ???? -->
      <map code="0xe65b" name="two"/><!-- ???? -->
      <map code="0xe65c" name="hyphen"/><!-- ???? -->
      <map code="0xe65d" name="hyphen"/><!-- ???? -->
      <map code="0xe65e" name="hyphen"/><!-- ???? -->
      <map code="0xe65f" name="one"/><!-- ???? -->
      <map code="0xe660" name="nine"/><!-- ???? -->
      <map code="0xe661" name="five"/><!-- ???? -->
      <map code="0xe662" name="six"/><!-- ???? -->
      <map code="0xe663" name="seven"/><!-- ???? -->
      <map code="0xe664" name="seven"/><!-- ???? -->
      <map code="0xe665" name="two"/><!-- ???? -->
      <map code="0xe666" name="eight"/><!-- ???? -->
      <map code="0xe667" name="nine"/><!-- ???? -->
      <map code="0xe668" name="nine"/><!-- ???? -->
      <map code="0xe669" name="six"/><!-- ???? -->
      <map code="0xe66a" name="one"/><!-- ???? -->
      <map code="0xe66b" name="three"/><!-- ???? -->
      <map code="0xe66c" name="seven"/><!-- ???? -->
      <map code="0xe66d" name="five"/><!-- ???? -->
      <map code="0xe66e" name="three"/><!-- ???? -->
      <map code="0xe66f" name="nine"/><!-- ???? -->
      <map code="0xe670" name="five"/><!-- ???? -->
      <map code="0xe671" name="seven"/><!-- ???? -->
      <map code="0xe672" name="seven"/><!-- ???? -->
      <map code="0xe673" name="five"/><!-- ???? -->
      <map code="0xe674" name="five"/><!-- ???? -->
      <map code="0xe675" name="nine"/><!-- ???? -->
      <map code="0xe676" name="six"/><!-- ???? -->
      <map code="0xe677" name="three"/><!-- ???? -->
      <map code="0xe678" name="zero"/><!-- ???? -->
      <map code="0xe679" name="one"/><!-- ???? -->
      <map code="0xe67a" name="nine"/><!-- ???? -->
      <map code="0xe67b" name="four"/><!-- ???? -->
      <map code="0xe67c" name="seven"/><!-- ???? -->
      <map code="0xe67d" name="zero"/><!-- ???? -->
      <map code="0xe67e" name="one"/><!-- ???? -->
      <map code="0xe67f" name="hyphen"/><!-- ???? -->
      <map code="0xe680" name="two"/><!-- ???? -->
      <map code="0xe681" name="eight"/><!-- ???? -->
      <map code="0xe682" name="one"/><!-- ???? -->
      <map code="0xe683" name="five"/><!-- ???? -->
      <map code="0xe684" name="eight"/><!-- ???? -->
      <map code="0xe685" name="nine"/><!-- ???? -->
      <map code="0xe686" name="six"/><!-- ???? -->
      <map code="0xe687" name="one"/><!-- ???? -->
      <map code="0xe688" name="two"/><!-- ???? -->
      <map code="0xe689" name="eight"/><!-- ???? -->
      <map code="0xe68a" name="four"/><!-- ???? -->
      <map code="0xe68b" name="six"/><!-- ???? -->
      <map code="0xe68c" name="seven"/><!-- ???? -->
      <map code="0xe68d" name="zero"/><!-- ???? -->
      <map code="0xe68e" name="nine"/><!-- ???? -->
      <map code="0xe68f" name="three"/><!-- ???? -->
      <map code="0xe690" name="hyphen"/><!-- ???? -->
      <map code="0xe691" name="nine"/><!-- ???? -->
      <map code="0xe692" name="zero"/><!-- ???? -->
      <map code="0xe693" name="three"/><!-- ???? -->
      <map code="0xe694" name="zero"/><!-- ???? -->
      <map code="0xe695" name="five"/><!-- ???? -->
      <map code="0xe696" name="four"/><!-- ???? -->
      <map code="0xe697" name="zero"/><!-- ???? -->
      <map code="0xe698" name="two"/><!-- ???? -->
      <map code="0xe699" name="four"/><!-- ???? -->
      <map code="0xe69a" name="zero"/><!-- ???? -->
      <map code="0xe69b" name="four"/><!-- ???? -->
      <map code="0xe69c" name="zero"/><!-- ???? -->
      <map code="0xe69d" name="zero"/><!-- ???? -->
      <map code="0xe69e" name="eight"/><!-- ???? -->
      <map code="0xe69f" name="one"/><!-- ???? -->
      <map code="0xe6a0" name="hyphen"/><!-- ???? -->
      <map code="0xe6a1" name="four"/><!-- ???? -->
      <map code="0xe6a2" name="six"/><!-- ???? -->
      <map code="0xe6a3" name="hyphen"/><!-- ???? -->
      <map code="0xe6a4" name="hyphen"/><!-- ???? -->
      <map code="0xe6a5" name="three"/><!-- ???? -->
      <map code="0xe6a6" name="two"/><!-- ???? -->
      <map code="0xe6a7" name="two"/><!-- ???? -->
      <map code="0xe6a8" name="one"/><!-- ???? -->
      <map code="0xe6a9" name="four"/><!-- ???? -->
      <map code="0xe6aa" name="eight"/><!-- ???? -->
      <map code="0xe6ab" name="one"/><!-- ???? -->
      <map code="0xe6ac" name="six"/><!-- ???? -->
      <map code="0xe6ad" name="six"/><!-- ???? -->
      <map code="0xe6ae" name="eight"/><!-- ???? -->
      <map code="0xe6af" name="nine"/><!-- ???? -->
      <map code="0xe6b0" name="eight"/><!-- ???? -->
      <map code="0xe6b1" name="seven"/><!-- ???? -->
      <map code="0xe6b2" name="four"/><!-- ???? -->
      <map code="0xe6b3" name="six"/><!-- ???? -->
      <map code="0xe6b4" name="three"/><!-- ???? -->
      <map code="0xe6b5" name="eight"/><!-- ???? -->
      <map code="0xe6b6" name="three"/><!-- ???? -->
      <map code="0xe6b7" name="five"/><!-- ???? -->
      <map code="0xe6b8" name="five"/><!-- ???? -->
      <map code="0xe6b9" name="four"/><!-- ???? -->
      <map code="0xe6ba" name="seven"/><!-- ???? -->
      <map code="0xe6bb" name="hyphen"/><!-- ???? -->
      <map code="0xe6bc" name="two"/><!-- ???? -->
      <map code="0xe6bd" name="one"/><!-- ???? -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      PUSHW[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHW[ ]	/* 1 value pushed */
        9
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          1 1
          INSTCTRL[ ]	/* SetInstrExecControl */
        EIF[ ]	/* EndIf */
        PUSHW[ ]	/* 1 value pushed */
        511
        SCANCTRL[ ]	/* ScanConversionControl */
        PUSHW[ ]	/* 1 value pushed */
        68
        SCVTCI[ ]	/* SetCVTCutIn */
        PUSHW[ ]	/* 2 values pushed */
        9 3
        SDS[ ]	/* SetDeltaShiftInGState */
        SDB[ ]	/* SetDeltaBaseInGState */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 1 value pushed */
        1
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[0]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          NEG[ ]	/* Negate */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MDAP[1]	/* MoveDirectAbsPt */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          ROUND[01]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          ROUND[01]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[10]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[10]	/* Round */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MDAP[1]	/* MoveDirectAbsPt */
        MIRP[11101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            128
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          192
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            192
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        RDTG[ ]	/* RoundDownToGrid */
        ROUND[01]	/* Round */
        RTG[ ]	/* RoundToGrid */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 1 value pushed */
        6
        LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          0
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHW[ ]	/* 1 value pushed */
          192
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHW[ ]	/* 1 value pushed */
          256
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHW[ ]	/* 1 value pushed */
          320
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        3
        MINDEX[ ]	/* MoveXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHW[ ]	/* 1 value pushed */
          384
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            PUSHW[ ]	/* 1 value pushed */
            384
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHW[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      PUSHW[ ]	/* 1 value pushed */
      0
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      1 2 2
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      3 4 2
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      3 33 27 21 15 9 0 8
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      4 36 30 23 17 10 0 8
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      5 31 25 20 14 9 0 8
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      6 25 20 16 12 7 0 8
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 8 values pushed */
      1 46 36 28 21 14 0 8
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 8 values pushed */
      2 42 36 28 21 14 0 8
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHW[ ]	/* 3 values pushed */
      7 5 7
      CALL[ ]	/* CallFunction */
      PUSHW[ ]	/* 1 value pushed */
      0
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      RDTG[ ]	/* RoundDownToGrid */
      ROUND[01]	/* Round */
      RTG[ ]	/* RoundToGrid */
      WCVTP[ ]	/* WriteCVTInPixels */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="13"/>
    <cv index="1" value="120"/>
    <cv index="2" value="132"/>
    <cv index="3" value="170"/>
    <cv index="4" value="154"/>
    <cv index="5" value="182"/>
    <cv index="6" value="226"/>
    <cv index="7" value="760"/>
    <cv index="8" value="10"/>
    <cv index="9" value="-210"/>
    <cv index="10" value="10"/>
    <cv index="11" value="700"/>
    <cv index="12" value="10"/>
    <cv index="13" value="540"/>
    <cv index="14" value="10"/>
    <cv index="15" value="0"/>
    <cv index="16" value="10"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="eight" xMin="60" yMin="-10" xMax="635" yMax="710">
      <contour>
        <pt x="524" y="360" on="1"/>
        <pt x="560" y="356" on="0"/>
        <pt x="604" y="336" on="0"/>
        <pt x="627" y="297" on="0"/>
        <pt x="635" y="236" on="0"/>
        <pt x="635" y="190" on="1"/>
        <pt x="635" y="121" on="0"/>
        <pt x="618" y="42" on="0"/>
        <pt x="560" y="1" on="0"/>
        <pt x="445" y="-10" on="0"/>
        <pt x="348" y="-10" on="1"/>
        <pt x="250" y="-10" on="0"/>
        <pt x="136" y="1" on="0"/>
        <pt x="77" y="42" on="0"/>
        <pt x="60" y="121" on="0"/>
        <pt x="60" y="190" on="1"/>
        <pt x="60" y="236" on="0"/>
        <pt x="68" y="297" on="0"/>
        <pt x="92" y="336" on="0"/>
        <pt x="136" y="356" on="0"/>
        <pt x="172" y="360" on="1"/>
        <pt x="140" y="365" on="0"/>
        <pt x="102" y="386" on="0"/>
        <pt x="81" y="421" on="0"/>
        <pt x="74" y="473" on="0"/>
        <pt x="74" y="510" on="1"/>
        <pt x="74" y="574" on="0"/>
        <pt x="90" y="653" on="0"/>
        <pt x="146" y="696" on="0"/>
        <pt x="255" y="710" on="0"/>
        <pt x="348" y="710" on="1"/>
        <pt x="441" y="710" on="0"/>
        <pt x="549" y="696" on="0"/>
        <pt x="605" y="653" on="0"/>
        <pt x="621" y="574" on="0"/>
        <pt x="621" y="510" on="1"/>
        <pt x="621" y="473" on="0"/>
        <pt x="614" y="421" on="0"/>
        <pt x="594" y="386" on="0"/>
        <pt x="555" y="365" on="0"/>
      </contour>
      <contour>
        <pt x="348" y="586" on="1"/>
        <pt x="313" y="586" on="0"/>
        <pt x="272" y="581" on="0"/>
        <pt x="250" y="564" on="0"/>
        <pt x="244" y="531" on="0"/>
        <pt x="244" y="504" on="1"/>
        <pt x="244" y="477" on="0"/>
        <pt x="250" y="444" on="0"/>
        <pt x="272" y="427" on="0"/>
        <pt x="313" y="422" on="0"/>
        <pt x="348" y="422" on="1"/>
        <pt x="382" y="422" on="0"/>
        <pt x="423" y="427" on="0"/>
        <pt x="445" y="444" on="0"/>
        <pt x="451" y="477" on="0"/>
        <pt x="451" y="504" on="1"/>
        <pt x="451" y="531" on="0"/>
        <pt x="445" y="564" on="0"/>
        <pt x="423" y="581" on="0"/>
        <pt x="382" y="586" on="0"/>
      </contour>
      <contour>
        <pt x="348" y="114" on="1"/>
        <pt x="387" y="114" on="0"/>
        <pt x="433" y="120" on="0"/>
        <pt x="458" y="139" on="0"/>
        <pt x="465" y="175" on="0"/>
        <pt x="465" y="206" on="1"/>
        <pt x="465" y="237" on="0"/>
        <pt x="458" y="273" on="0"/>
        <pt x="433" y="292" on="0"/>
        <pt x="387" y="298" on="0"/>
        <pt x="348" y="298" on="1"/>
        <pt x="309" y="298" on="0"/>
        <pt x="262" y="292" on="0"/>
        <pt x="237" y="273" on="0"/>
        <pt x="230" y="237" on="0"/>
        <pt x="230" y="206" on="1"/>
        <pt x="230" y="175" on="0"/>
        <pt x="237" y="139" on="0"/>
        <pt x="262" y="120" on="0"/>
        <pt x="309" y="114" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            30
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            30 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            10
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            10 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          30
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          40 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 3 values pushed */
          0 40 10
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 3 values pushed */
          20 10 40
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 1 value pushed */
          10
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          60 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 3 values pushed */
          50 30 60
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 3 values pushed */
          70 10 40
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="five" xMin="60" yMin="-10" xMax="616" yMax="700">
      <contour>
        <pt x="360" y="430" on="1"/>
        <pt x="445" y="430" on="0"/>
        <pt x="546" y="418" on="0"/>
        <pt x="600" y="373" on="0"/>
        <pt x="616" y="285" on="0"/>
        <pt x="616" y="210" on="1"/>
        <pt x="616" y="135" on="0"/>
        <pt x="600" y="47" on="0"/>
        <pt x="543" y="2" on="0"/>
        <pt x="433" y="-10" on="0"/>
        <pt x="339" y="-10" on="1"/>
        <pt x="243" y="-10" on="0"/>
        <pt x="132" y="3" on="0"/>
        <pt x="75" y="44" on="0"/>
        <pt x="60" y="123" on="0"/>
        <pt x="60" y="189" on="1"/>
        <pt x="230" y="199" on="1"/>
        <pt x="230" y="170" on="0"/>
        <pt x="236" y="137" on="0"/>
        <pt x="258" y="119" on="0"/>
        <pt x="301" y="114" on="0"/>
        <pt x="339" y="114" on="1"/>
        <pt x="374" y="114" on="0"/>
        <pt x="416" y="120" on="0"/>
        <pt x="439" y="139" on="0"/>
        <pt x="446" y="176" on="0"/>
        <pt x="446" y="206" on="1"/>
        <pt x="446" y="235" on="0"/>
        <pt x="440" y="273" on="0"/>
        <pt x="415" y="296" on="0"/>
        <pt x="364" y="306" on="0"/>
        <pt x="319" y="306" on="1"/>
        <pt x="283" y="306" on="0"/>
        <pt x="220" y="304" on="0"/>
        <pt x="163" y="301" on="0"/>
        <pt x="107" y="297" on="0"/>
        <pt x="78" y="294" on="1"/>
        <pt x="84" y="700" on="1"/>
        <pt x="595" y="700" on="1"/>
        <pt x="595" y="505" on="1"/>
        <pt x="457" y="505" on="1"/>
        <pt x="448" y="572" on="1"/>
        <pt x="242" y="572" on="1"/>
        <pt x="239" y="420" on="1"/>
        <pt x="280" y="430" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            37
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            37 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            10
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            10 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          0 1 31 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          10
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          21 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          37
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          41 2
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="four" xMin="25" yMin="0" xMax="655" yMax="700">
      <contour>
        <pt x="547" y="116" on="1"/>
        <pt x="655" y="110" on="1"/>
        <pt x="655" y="0" on="1"/>
        <pt x="253" y="0" on="1"/>
        <pt x="253" y="110" on="1"/>
        <pt x="377" y="116" on="1"/>
        <pt x="377" y="197" on="1"/>
        <pt x="25" y="197" on="1"/>
        <pt x="25" y="308" on="1"/>
        <pt x="308" y="700" on="1"/>
        <pt x="547" y="700" on="1"/>
        <pt x="547" y="314" on="1"/>
        <pt x="655" y="314" on="1"/>
        <pt x="655" y="197" on="1"/>
        <pt x="547" y="197" on="1"/>
      </contour>
      <contour>
        <pt x="377" y="430" on="1"/>
        <pt x="377" y="509" on="0"/>
        <pt x="380" y="580" on="1"/>
        <pt x="360" y="547" on="0"/>
        <pt x="313" y="477" on="0"/>
        <pt x="287" y="438" on="1"/>
        <pt x="202" y="314" on="1"/>
        <pt x="377" y="314" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            9
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            9 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            2
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            2 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          22 1 6 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          2
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          1 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          4
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          22
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          11
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          6
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 1 value pushed */
          13
          MDRP[10000]	/* MoveDirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          9
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          17 1
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="hyphen" xMin="80" yMin="270" xMax="455" yMax="420">
      <contour>
        <pt x="455" y="270" on="1"/>
        <pt x="80" y="270" on="1"/>
        <pt x="80" y="420" on="1"/>
        <pt x="455" y="420" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 4 values pushed */
          3 2 0 4
          CALL[ ]	/* CallFunction */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="nine" xMin="60" yMin="-9" xMax="623" yMax="711">
      <contour>
        <pt x="343" y="711" on="1"/>
        <pt x="406" y="711" on="0"/>
        <pt x="497" y="703" on="0"/>
        <pt x="559" y="678" on="0"/>
        <pt x="597" y="630" on="0"/>
        <pt x="617" y="550" on="0"/>
        <pt x="623" y="433" on="0"/>
        <pt x="623" y="351" on="1"/>
        <pt x="623" y="269" on="0"/>
        <pt x="617" y="152" on="0"/>
        <pt x="597" y="72" on="0"/>
        <pt x="559" y="24" on="0"/>
        <pt x="497" y="-1" on="0"/>
        <pt x="406" y="-9" on="0"/>
        <pt x="343" y="-9" on="1"/>
        <pt x="247" y="-9" on="0"/>
        <pt x="138" y="5" on="0"/>
        <pt x="83" y="48" on="0"/>
        <pt x="69" y="127" on="0"/>
        <pt x="69" y="193" on="1"/>
        <pt x="235" y="203" on="1"/>
        <pt x="235" y="174" on="0"/>
        <pt x="240" y="142" on="0"/>
        <pt x="261" y="127" on="0"/>
        <pt x="305" y="123" on="0"/>
        <pt x="343" y="123" on="1"/>
        <pt x="379" y="123" on="0"/>
        <pt x="423" y="132" on="0"/>
        <pt x="445" y="168" on="0"/>
        <pt x="453" y="242" on="0"/>
        <pt x="453" y="308" on="1"/>
        <pt x="440" y="297" on="0"/>
        <pt x="409" y="282" on="0"/>
        <pt x="365" y="273" on="0"/>
        <pt x="306" y="269" on="0"/>
        <pt x="266" y="269" on="1"/>
        <pt x="205" y="269" on="0"/>
        <pt x="125" y="289" on="0"/>
        <pt x="79" y="339" on="0"/>
        <pt x="60" y="425" on="0"/>
        <pt x="60" y="491" on="1"/>
        <pt x="60" y="561" on="0"/>
        <pt x="77" y="647" on="0"/>
        <pt x="135" y="695" on="0"/>
        <pt x="247" y="711" on="0"/>
      </contour>
      <contour>
        <pt x="230" y="498" on="1"/>
        <pt x="230" y="466" on="0"/>
        <pt x="236" y="428" on="0"/>
        <pt x="257" y="407" on="0"/>
        <pt x="299" y="401" on="0"/>
        <pt x="335" y="401" on="1"/>
        <pt x="377" y="401" on="0"/>
        <pt x="430" y="409" on="0"/>
        <pt x="453" y="415" on="1"/>
        <pt x="452" y="473" on="0"/>
        <pt x="444" y="539" on="0"/>
        <pt x="420" y="571" on="0"/>
        <pt x="378" y="579" on="0"/>
        <pt x="343" y="579" on="1"/>
        <pt x="305" y="579" on="0"/>
        <pt x="261" y="571" on="0"/>
        <pt x="237" y="553" on="0"/>
        <pt x="230" y="522" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            0 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            14
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            14 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          50 2 35 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          14
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          25 2
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          0
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          58 2
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="one" xMin="40" yMin="0" xMax="508" yMax="700">
      <contour>
        <pt x="508" y="0" on="1"/>
        <pt x="52" y="0" on="1"/>
        <pt x="52" y="120" on="1"/>
        <pt x="202" y="126" on="1"/>
        <pt x="202" y="555" on="1"/>
        <pt x="58" y="539" on="1"/>
        <pt x="40" y="661" on="1"/>
        <pt x="297" y="700" on="1"/>
        <pt x="372" y="700" on="1"/>
        <pt x="372" y="126" on="1"/>
        <pt x="508" y="120" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            7
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            7 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            0 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          5 1 6 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          0
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          10 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          2
          MDRP[10000]	/* MoveDirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="seven" xMin="40" yMin="0" xMax="601" yMax="700">
      <contour>
        <pt x="601" y="589" on="1"/>
        <pt x="310" y="0" on="1"/>
        <pt x="137" y="0" on="1"/>
        <pt x="137" y="10" on="1"/>
        <pt x="423" y="579" on="1"/>
        <pt x="200" y="579" on="1"/>
        <pt x="190" y="460" on="1"/>
        <pt x="40" y="460" on="1"/>
        <pt x="40" y="700" on="1"/>
        <pt x="601" y="700" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            1
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            1 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            8
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            8 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 2 values pushed */
          4 1
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="six" xMin="60" yMin="-10" xMax="623" yMax="710">
      <contour>
        <pt x="417" y="422" on="1"/>
        <pt x="478" y="422" on="0"/>
        <pt x="558" y="404" on="0"/>
        <pt x="604" y="356" on="0"/>
        <pt x="623" y="274" on="0"/>
        <pt x="623" y="210" on="1"/>
        <pt x="623" y="140" on="0"/>
        <pt x="606" y="54" on="0"/>
        <pt x="548" y="6" on="0"/>
        <pt x="436" y="-10" on="0"/>
        <pt x="340" y="-10" on="1"/>
        <pt x="277" y="-10" on="0"/>
        <pt x="186" y="-2" on="0"/>
        <pt x="124" y="23" on="0"/>
        <pt x="86" y="71" on="0"/>
        <pt x="66" y="151" on="0"/>
        <pt x="60" y="268" on="0"/>
        <pt x="60" y="350" on="1"/>
        <pt x="60" y="432" on="0"/>
        <pt x="66" y="549" on="0"/>
        <pt x="86" y="629" on="0"/>
        <pt x="124" y="677" on="0"/>
        <pt x="186" y="702" on="0"/>
        <pt x="277" y="710" on="0"/>
        <pt x="340" y="710" on="1"/>
        <pt x="436" y="710" on="0"/>
        <pt x="545" y="695" on="0"/>
        <pt x="600" y="650" on="0"/>
        <pt x="614" y="569" on="0"/>
        <pt x="614" y="503" on="1"/>
        <pt x="448" y="493" on="1"/>
        <pt x="448" y="523" on="0"/>
        <pt x="443" y="558" on="0"/>
        <pt x="422" y="574" on="0"/>
        <pt x="378" y="578" on="0"/>
        <pt x="340" y="578" on="1"/>
        <pt x="303" y="578" on="0"/>
        <pt x="259" y="569" on="0"/>
        <pt x="237" y="531" on="0"/>
        <pt x="230" y="452" on="0"/>
        <pt x="230" y="383" on="1"/>
        <pt x="243" y="394" on="0"/>
        <pt x="274" y="409" on="0"/>
        <pt x="317" y="418" on="0"/>
        <pt x="376" y="422" on="0"/>
      </contour>
      <contour>
        <pt x="340" y="122" on="1"/>
        <pt x="377" y="122" on="0"/>
        <pt x="422" y="130" on="0"/>
        <pt x="446" y="148" on="0"/>
        <pt x="453" y="179" on="0"/>
        <pt x="453" y="203" on="1"/>
        <pt x="453" y="234" on="0"/>
        <pt x="447" y="270" on="0"/>
        <pt x="426" y="289" on="0"/>
        <pt x="384" y="295" on="0"/>
        <pt x="348" y="295" on="1"/>
        <pt x="306" y="295" on="0"/>
        <pt x="253" y="287" on="0"/>
        <pt x="230" y="279" on="1"/>
        <pt x="231" y="223" on="0"/>
        <pt x="240" y="160" on="0"/>
        <pt x="264" y="129" on="0"/>
        <pt x="306" y="122" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            24
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            24 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            10
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            10 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          0 2 55 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          24
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          35 2
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          10
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          45 2
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="three" xMin="60" yMin="-10" xMax="635" yMax="710">
      <contour>
        <pt x="510" y="360" on="1"/>
        <pt x="551" y="356" on="0"/>
        <pt x="600" y="336" on="0"/>
        <pt x="627" y="297" on="0"/>
        <pt x="635" y="235" on="0"/>
        <pt x="635" y="190" on="1"/>
        <pt x="635" y="121" on="0"/>
        <pt x="618" y="42" on="0"/>
        <pt x="560" y="1" on="0"/>
        <pt x="445" y="-10" on="0"/>
        <pt x="348" y="-10" on="1"/>
        <pt x="246" y="-10" on="0"/>
        <pt x="131" y="3" on="0"/>
        <pt x="74" y="52" on="0"/>
        <pt x="60" y="147" on="0"/>
        <pt x="60" y="229" on="1"/>
        <pt x="230" y="239" on="1"/>
        <pt x="230" y="197" on="0"/>
        <pt x="235" y="147" on="0"/>
        <pt x="258" y="122" on="0"/>
        <pt x="305" y="114" on="0"/>
        <pt x="348" y="114" on="1"/>
        <pt x="387" y="114" on="0"/>
        <pt x="433" y="120" on="0"/>
        <pt x="458" y="139" on="0"/>
        <pt x="465" y="175" on="0"/>
        <pt x="465" y="206" on="1"/>
        <pt x="465" y="237" on="0"/>
        <pt x="456" y="273" on="0"/>
        <pt x="419" y="292" on="0"/>
        <pt x="344" y="298" on="0"/>
        <pt x="278" y="298" on="1"/>
        <pt x="278" y="422" on="1"/>
        <pt x="340" y="422" on="0"/>
        <pt x="409" y="427" on="0"/>
        <pt x="443" y="444" on="0"/>
        <pt x="451" y="477" on="0"/>
        <pt x="451" y="504" on="1"/>
        <pt x="451" y="531" on="0"/>
        <pt x="445" y="564" on="0"/>
        <pt x="423" y="581" on="0"/>
        <pt x="382" y="586" on="0"/>
        <pt x="348" y="586" on="1"/>
        <pt x="310" y="586" on="0"/>
        <pt x="269" y="581" on="0"/>
        <pt x="248" y="563" on="0"/>
        <pt x="244" y="529" on="0"/>
        <pt x="244" y="500" on="1"/>
        <pt x="74" y="490" on="1"/>
        <pt x="74" y="561" on="0"/>
        <pt x="87" y="648" on="0"/>
        <pt x="141" y="695" on="0"/>
        <pt x="251" y="710" on="0"/>
        <pt x="348" y="710" on="1"/>
        <pt x="441" y="710" on="0"/>
        <pt x="549" y="696" on="0"/>
        <pt x="605" y="653" on="0"/>
        <pt x="621" y="574" on="0"/>
        <pt x="621" y="510" on="1"/>
        <pt x="621" y="473" on="0"/>
        <pt x="613" y="421" on="0"/>
        <pt x="590" y="386" on="0"/>
        <pt x="546" y="365" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            53
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            53 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            10
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            10 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 4 values pushed */
          32 1 31 4
          CALL[ ]	/* CallFunction */
          PUSHW[ ]	/* 1 value pushed */
          10
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          21 1
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          53
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          42 1
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="two" xMin="60" yMin="0" xMax="608" yMax="710">
      <contour>
        <pt x="608" y="0" on="1"/>
        <pt x="60" y="0" on="1"/>
        <pt x="60" y="123" on="1"/>
        <pt x="60" y="181" on="0"/>
        <pt x="77" y="259" on="0"/>
        <pt x="123" y="316" on="0"/>
        <pt x="206" y="360" on="0"/>
        <pt x="272" y="383" on="1"/>
        <pt x="330" y="404" on="0"/>
        <pt x="397" y="431" on="0"/>
        <pt x="430" y="455" on="0"/>
        <pt x="438" y="484" on="0"/>
        <pt x="438" y="506" on="1"/>
        <pt x="438" y="531" on="0"/>
        <pt x="432" y="561" on="0"/>
        <pt x="413" y="577" on="0"/>
        <pt x="374" y="581" on="0"/>
        <pt x="341" y="581" on="1"/>
        <pt x="307" y="581" on="0"/>
        <pt x="268" y="576" on="0"/>
        <pt x="248" y="559" on="0"/>
        <pt x="242" y="527" on="0"/>
        <pt x="242" y="499" on="1"/>
        <pt x="77" y="489" on="1"/>
        <pt x="77" y="558" on="0"/>
        <pt x="96" y="644" on="0"/>
        <pt x="153" y="693" on="0"/>
        <pt x="257" y="710" on="0"/>
        <pt x="341" y="710" on="1"/>
        <pt x="424" y="710" on="0"/>
        <pt x="527" y="696" on="0"/>
        <pt x="584" y="656" on="0"/>
        <pt x="603" y="583" on="0"/>
        <pt x="603" y="524" on="1"/>
        <pt x="603" y="484" on="0"/>
        <pt x="597" y="428" on="0"/>
        <pt x="580" y="387" on="0"/>
        <pt x="548" y="357" on="0"/>
        <pt x="494" y="328" on="0"/>
        <pt x="416" y="297" on="0"/>
        <pt x="362" y="276" on="1"/>
        <pt x="313" y="257" on="0"/>
        <pt x="258" y="229" on="0"/>
        <pt x="231" y="202" on="0"/>
        <pt x="225" y="169" on="0"/>
        <pt x="225" y="145" on="1"/>
        <pt x="225" y="131" on="1"/>
        <pt x="460" y="131" on="1"/>
        <pt x="468" y="224" on="1"/>
        <pt x="608" y="224" on="1"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            28
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            28 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            0 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 2 values pushed */
          47 2
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 3 values pushed */
          7 47 28
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          PUSHW[ ]	/* 1 value pushed */
          28
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          17 2
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 3 values pushed */
          40 17 0
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="zero" xMin="60" yMin="-10" xMax="635" yMax="710">
      <contour>
        <pt x="348" y="710" on="1"/>
        <pt x="413" y="710" on="0"/>
        <pt x="506" y="702" on="0"/>
        <pt x="570" y="677" on="0"/>
        <pt x="608" y="629" on="0"/>
        <pt x="629" y="549" on="0"/>
        <pt x="635" y="432" on="0"/>
        <pt x="635" y="350" on="1"/>
        <pt x="635" y="268" on="0"/>
        <pt x="629" y="151" on="0"/>
        <pt x="608" y="71" on="0"/>
        <pt x="570" y="23" on="0"/>
        <pt x="506" y="-2" on="0"/>
        <pt x="413" y="-10" on="0"/>
        <pt x="348" y="-10" on="1"/>
        <pt x="283" y="-10" on="0"/>
        <pt x="189" y="-2" on="0"/>
        <pt x="125" y="23" on="0"/>
        <pt x="87" y="71" on="0"/>
        <pt x="66" y="151" on="0"/>
        <pt x="60" y="268" on="0"/>
        <pt x="60" y="350" on="1"/>
        <pt x="60" y="432" on="0"/>
        <pt x="66" y="549" on="0"/>
        <pt x="87" y="629" on="0"/>
        <pt x="125" y="677" on="0"/>
        <pt x="189" y="702" on="0"/>
        <pt x="283" y="710" on="0"/>
      </contour>
      <contour>
        <pt x="348" y="578" on="1"/>
        <pt x="306" y="578" on="0"/>
        <pt x="259" y="568" on="0"/>
        <pt x="235" y="523" on="0"/>
        <pt x="230" y="431" on="0"/>
        <pt x="230" y="350" on="1"/>
        <pt x="230" y="269" on="0"/>
        <pt x="235" y="177" on="0"/>
        <pt x="259" y="132" on="0"/>
        <pt x="306" y="122" on="0"/>
        <pt x="348" y="122" on="1"/>
        <pt x="390" y="122" on="0"/>
        <pt x="437" y="132" on="0"/>
        <pt x="460" y="177" on="0"/>
        <pt x="465" y="269" on="0"/>
        <pt x="465" y="350" on="1"/>
        <pt x="465" y="431" on="0"/>
        <pt x="460" y="523" on="0"/>
        <pt x="437" y="568" on="0"/>
        <pt x="390" y="578" on="0"/>
      </contour>
      <instructions>
        <assembly>
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            0
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            0 11
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          RCVT[ ]	/* ReadCVT */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            14
            MDAP[1]	/* MoveDirectAbsPt */
          ELSE[ ]	/* Else */
            PUSHW[ ]	/* 2 values pushed */
            14 15
            MIAP[0]	/* MoveIndirectAbsPt */
          EIF[ ]	/* EndIf */
          PUSHW[ ]	/* 1 value pushed */
          0
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          28 2
          MIRP[10100]	/* MoveIndirectRelPt */
          PUSHW[ ]	/* 1 value pushed */
          14
          SRP0[ ]	/* SetRefPoint0 */
          PUSHW[ ]	/* 2 values pushed */
          38 2
          MIRP[10100]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Copyright (c) 2014 by Sascha Timplan, Lukas Bischoff. All rights reserved.
    </namerecord>
    <namerecord nameID="1" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Fortuna
    </namerecord>
    <namerecord nameID="2" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="1" platEncID="0" langID="0x0" unicode="True">
      1.000;pyrs;Fortuna-Bold;2014;TR4-4.0.1.5099
    </namerecord>
    <namerecord nameID="4" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Fortuna-Bold
    </namerecord>
    <namerecord nameID="5" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Version 1.000
    </namerecord>
    <namerecord nameID="6" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Fortuna-Bold
    </namerecord>
    <namerecord nameID="7" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Fortuna Bold is a trademark of Sascha Timplan, Lukas Bischoff.
    </namerecord>
    <namerecord nameID="8" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Sascha Timplan, Lukas Bischoff
    </namerecord>
    <namerecord nameID="9" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Sascha Timplan, Lukas Bischoff
    </namerecord>
    <namerecord nameID="10" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Copyright (c) 2014 by Sascha Timplan, Lukas Bischoff. All rights reserved.
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright (c) 2014 by Sascha Timplan, Lukas Bischoff. All rights reserved.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Fortuna
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      1.000;pyrs;Fortuna-Bold;2014;TR4-4.0.1.5099
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Fortuna-Bold
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 1.000
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      Fortuna-Bold
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Fortuna Bold is a trademark of Sascha Timplan, Lukas Bischoff.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Sascha Timplan, Lukas Bischoff
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Sascha Timplan, Lukas Bischoff
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      Copyright (c) 2014 by Sascha Timplan, Lukas Bischoff. All rights reserved.
    </namerecord>
    <namerecord nameID="17" platformID="3" platEncID="1" langID="0x409">
      Bold
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-75"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="10"/>
    <gaspRange rangeMaxPPEM="16" rangeGaspBehavior="5"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="15"/>
  </gasp>

</ttFont>
