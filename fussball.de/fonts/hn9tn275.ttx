<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.55">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="comma"/>
    <GlyphID id="2" name="period"/>
    <GlyphID id="3" name="zero"/>
    <GlyphID id="4" name="one"/>
    <GlyphID id="5" name="two"/>
    <GlyphID id="6" name="three"/>
    <GlyphID id="7" name="four"/>
    <GlyphID id="8" name="five"/>
    <GlyphID id="9" name="six"/>
    <GlyphID id="10" name="seven"/>
    <GlyphID id="11" name="eight"/>
    <GlyphID id="12" name="nine"/>
    <GlyphID id="13" name="colon"/>
    <GlyphID id="14" name="D"/>
    <GlyphID id="15" name="F"/>
    <GlyphID id="16" name="M"/>
    <GlyphID id="17" name="S"/>
    <GlyphID id="18" name="a"/>
    <GlyphID id="19" name="c"/>
    <GlyphID id="20" name="e"/>
    <GlyphID id="21" name="g"/>
    <GlyphID id="22" name="h"/>
    <GlyphID id="23" name="i"/>
    <GlyphID id="24" name="m"/>
    <GlyphID id="25" name="n"/>
    <GlyphID id="26" name="o"/>
    <GlyphID id="27" name="r"/>
    <GlyphID id="28" name="s"/>
    <GlyphID id="29" name="t"/>
    <GlyphID id="30" name="w"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="2.0"/>
    <checkSumAdjustment value="0x2b4b2e24"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000010 00011111"/>
    <unitsPerEm value="2048"/>
    <created value="Thu Oct  4 11:02:31 2012"/>
    <modified value="Thu Oct  4 11:02:31 2012"/>
    <xMin value="-1114"/>
    <yMin value="-621"/>
    <xMax value="2666"/>
    <yMax value="2007"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="8"/>
    <fontDirectionHint value="0"/>
    <indexToLocFormat value="1"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1854"/>
    <descent value="-434"/>
    <lineGap value="67"/>
    <advanceWidthMax value="1706"/>
    <minLeftSideBearing value="-1114"/>
    <minRightSideBearing value="-1414"/>
    <xMaxExtent value="2666"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="31"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="31"/>
    <maxPoints value="338"/>
    <maxContours value="84"/>
    <maxCompositePoints value="92"/>
    <maxCompositeContours value="6"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="92"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="676"/>
    <maxSizeOfInstructions value="516"/>
    <maxComponentElements value="4"/>
    <maxComponentDepth value="1"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="3"/>
    <xAvgCharWidth value="1186"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="1434"/>
    <ySubscriptYSize value="1331"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="283"/>
    <ySuperscriptXSize value="1434"/>
    <ySuperscriptYSize value="1331"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="977"/>
    <yStrikeoutSize value="102"/>
    <yStrikeoutPosition value="530"/>
    <sFamilyClass value="2053"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="11"/>
      <bWeight value="6"/>
      <bProportion value="4"/>
      <bContrast value="2"/>
      <bStrokeVariation value="2"/>
      <bArmStyle value="2"/>
      <bLetterForm value="2"/>
      <bMidline value="2"/>
      <bXHeight value="4"/>
    </panose>
    <ulUnicodeRange1 value="11100000 00000000 00001010 11111111"/>
    <ulUnicodeRange2 value="01010000 00000000 01111000 11111111"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00100001"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="1ASC"/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="32"/>
    <usLastCharIndex value="65532"/>
    <sTypoAscender value="1491"/>
    <sTypoDescender value="-431"/>
    <sTypoLineGap value="307"/>
    <usWinAscent value="1854"/>
    <usWinDescent value="434"/>
    <ulCodePageRange1 value="01100000 00000000 00000001 10111111"/>
    <ulCodePageRange2 value="11011111 11110111 00000000 00000000"/>
    <sxHeight value="1082"/>
    <sCapHeight value="1409"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="14"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="1536" lsb="205"/>
    <mtx name="D" width="1479" lsb="168"/>
    <mtx name="F" width="1251" lsb="168"/>
    <mtx name="M" width="1706" lsb="168"/>
    <mtx name="S" width="1366" lsb="93"/>
    <mtx name="a" width="1139" lsb="87"/>
    <mtx name="c" width="1024" lsb="87"/>
    <mtx name="colon" width="569" lsb="187"/>
    <mtx name="comma" width="569" lsb="184"/>
    <mtx name="e" width="1139" lsb="87"/>
    <mtx name="eight" width="1139" lsb="89"/>
    <mtx name="five" width="1139" lsb="82"/>
    <mtx name="four" width="1139" lsb="47"/>
    <mtx name="g" width="1139" lsb="86"/>
    <mtx name="h" width="1139" lsb="142"/>
    <mtx name="i" width="455" lsb="137"/>
    <mtx name="m" width="1706" lsb="136"/>
    <mtx name="n" width="1139" lsb="136"/>
    <mtx name="nine" width="1139" lsb="96"/>
    <mtx name="o" width="1139" lsb="86"/>
    <mtx name="one" width="1139" lsb="156"/>
    <mtx name="period" width="569" lsb="187"/>
    <mtx name="r" width="682" lsb="136"/>
    <mtx name="s" width="1024" lsb="57"/>
    <mtx name="seven" width="1139" lsb="105"/>
    <mtx name="six" width="1139" lsb="104"/>
    <mtx name="t" width="569" lsb="31"/>
    <mtx name="three" width="1139" lsb="78"/>
    <mtx name="two" width="1139" lsb="103"/>
    <mtx name="w" width="1479" lsb="-3"/>
    <mtx name="zero" width="1139" lsb="80"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0xe650" name="g"/><!-- ???? -->
      <map code="0xe651" name="four"/><!-- ???? -->
      <map code="0xe652" name="m"/><!-- ???? -->
      <map code="0xe653" name="six"/><!-- ???? -->
      <map code="0xe654" name="four"/><!-- ???? -->
      <map code="0xe655" name="one"/><!-- ???? -->
      <map code="0xe656" name="six"/><!-- ???? -->
      <map code="0xe657" name="a"/><!-- ???? -->
      <map code="0xe658" name="i"/><!-- ???? -->
      <map code="0xe659" name="nine"/><!-- ???? -->
      <map code="0xe65a" name="eight"/><!-- ???? -->
      <map code="0xe65b" name="seven"/><!-- ???? -->
      <map code="0xe65c" name="S"/><!-- ???? -->
      <map code="0xe65d" name="h"/><!-- ???? -->
      <map code="0xe65e" name="g"/><!-- ???? -->
      <map code="0xe65f" name="o"/><!-- ???? -->
      <map code="0xe660" name="t"/><!-- ???? -->
      <map code="0xe661" name="t"/><!-- ???? -->
      <map code="0xe662" name="zero"/><!-- ???? -->
      <map code="0xe663" name="h"/><!-- ???? -->
      <map code="0xe664" name="F"/><!-- ???? -->
      <map code="0xe665" name="o"/><!-- ???? -->
      <map code="0xe666" name="five"/><!-- ???? -->
      <map code="0xe667" name="D"/><!-- ???? -->
      <map code="0xe668" name="i"/><!-- ???? -->
      <map code="0xe669" name="two"/><!-- ???? -->
      <map code="0xe66a" name="i"/><!-- ???? -->
      <map code="0xe66b" name="five"/><!-- ???? -->
      <map code="0xe66c" name="r"/><!-- ???? -->
      <map code="0xe66d" name="t"/><!-- ???? -->
      <map code="0xe66e" name="s"/><!-- ???? -->
      <map code="0xe66f" name="period"/><!-- ???? -->
      <map code="0xe670" name="s"/><!-- ???? -->
      <map code="0xe671" name="F"/><!-- ???? -->
      <map code="0xe672" name="colon"/><!-- ???? -->
      <map code="0xe673" name="i"/><!-- ???? -->
      <map code="0xe674" name="period"/><!-- ???? -->
      <map code="0xe675" name="nine"/><!-- ???? -->
      <map code="0xe676" name="t"/><!-- ???? -->
      <map code="0xe677" name="t"/><!-- ???? -->
      <map code="0xe678" name="t"/><!-- ???? -->
      <map code="0xe679" name="six"/><!-- ???? -->
      <map code="0xe67a" name="one"/><!-- ???? -->
      <map code="0xe67b" name="e"/><!-- ???? -->
      <map code="0xe67c" name="four"/><!-- ???? -->
      <map code="0xe67d" name="one"/><!-- ???? -->
      <map code="0xe67e" name="two"/><!-- ???? -->
      <map code="0xe67f" name="g"/><!-- ???? -->
      <map code="0xe680" name="F"/><!-- ???? -->
      <map code="0xe681" name="e"/><!-- ???? -->
      <map code="0xe682" name="w"/><!-- ???? -->
      <map code="0xe683" name="nine"/><!-- ???? -->
      <map code="0xe684" name="period"/><!-- ???? -->
      <map code="0xe685" name="o"/><!-- ???? -->
      <map code="0xe686" name="g"/><!-- ???? -->
      <map code="0xe687" name="M"/><!-- ???? -->
      <map code="0xe688" name="S"/><!-- ???? -->
      <map code="0xe689" name="w"/><!-- ???? -->
      <map code="0xe68a" name="zero"/><!-- ???? -->
      <map code="0xe68b" name="w"/><!-- ???? -->
      <map code="0xe68c" name="h"/><!-- ???? -->
      <map code="0xe68d" name="a"/><!-- ???? -->
      <map code="0xe68e" name="comma"/><!-- ???? -->
      <map code="0xe68f" name="h"/><!-- ???? -->
      <map code="0xe690" name="colon"/><!-- ???? -->
      <map code="0xe691" name="s"/><!-- ???? -->
      <map code="0xe692" name="D"/><!-- ???? -->
      <map code="0xe693" name="a"/><!-- ???? -->
      <map code="0xe694" name="w"/><!-- ???? -->
      <map code="0xe695" name="a"/><!-- ???? -->
      <map code="0xe696" name="r"/><!-- ???? -->
      <map code="0xe697" name="zero"/><!-- ???? -->
      <map code="0xe698" name="four"/><!-- ???? -->
      <map code="0xe699" name="w"/><!-- ???? -->
      <map code="0xe69a" name="D"/><!-- ???? -->
      <map code="0xe69b" name="M"/><!-- ???? -->
      <map code="0xe69c" name="c"/><!-- ???? -->
      <map code="0xe69d" name="c"/><!-- ???? -->
      <map code="0xe69e" name="eight"/><!-- ???? -->
      <map code="0xe69f" name="colon"/><!-- ???? -->
      <map code="0xe6a0" name="nine"/><!-- ???? -->
      <map code="0xe6a1" name="six"/><!-- ???? -->
      <map code="0xe6a2" name="one"/><!-- ???? -->
      <map code="0xe6a3" name="period"/><!-- ???? -->
      <map code="0xe6a4" name="zero"/><!-- ???? -->
      <map code="0xe6a5" name="three"/><!-- ???? -->
      <map code="0xe6a6" name="e"/><!-- ???? -->
      <map code="0xe6a7" name="r"/><!-- ???? -->
      <map code="0xe6a8" name="four"/><!-- ???? -->
      <map code="0xe6a9" name="seven"/><!-- ???? -->
      <map code="0xe6aa" name="e"/><!-- ???? -->
      <map code="0xe6ab" name="eight"/><!-- ???? -->
      <map code="0xe6ac" name="five"/><!-- ???? -->
      <map code="0xe6ad" name="comma"/><!-- ???? -->
      <map code="0xe6ae" name="c"/><!-- ???? -->
      <map code="0xe6af" name="i"/><!-- ???? -->
      <map code="0xe6b0" name="nine"/><!-- ???? -->
      <map code="0xe6b1" name="three"/><!-- ???? -->
      <map code="0xe6b2" name="F"/><!-- ???? -->
      <map code="0xe6b3" name="w"/><!-- ???? -->
      <map code="0xe6b4" name="g"/><!-- ???? -->
      <map code="0xe6b5" name="five"/><!-- ???? -->
      <map code="0xe6b6" name="zero"/><!-- ???? -->
      <map code="0xe6b7" name="D"/><!-- ???? -->
      <map code="0xe6b8" name="six"/><!-- ???? -->
      <map code="0xe6b9" name="i"/><!-- ???? -->
      <map code="0xe6ba" name="s"/><!-- ???? -->
      <map code="0xe6bb" name="e"/><!-- ???? -->
      <map code="0xe6bc" name="S"/><!-- ???? -->
      <map code="0xe6bd" name="o"/><!-- ???? -->
      <map code="0xe6be" name="zero"/><!-- ???? -->
      <map code="0xe6bf" name="e"/><!-- ???? -->
      <map code="0xe6c0" name="h"/><!-- ???? -->
      <map code="0xe6c1" name="c"/><!-- ???? -->
      <map code="0xe6c2" name="r"/><!-- ???? -->
      <map code="0xe6c3" name="c"/><!-- ???? -->
      <map code="0xe6c4" name="one"/><!-- ???? -->
      <map code="0xe6c5" name="three"/><!-- ???? -->
      <map code="0xe6c6" name="five"/><!-- ???? -->
      <map code="0xe6c7" name="g"/><!-- ???? -->
      <map code="0xe6c8" name="seven"/><!-- ???? -->
      <map code="0xe6c9" name="two"/><!-- ???? -->
      <map code="0xe6ca" name="a"/><!-- ???? -->
      <map code="0xe6cb" name="comma"/><!-- ???? -->
      <map code="0xe6cc" name="n"/><!-- ???? -->
      <map code="0xe6cd" name="w"/><!-- ???? -->
      <map code="0xe6ce" name="five"/><!-- ???? -->
      <map code="0xe6cf" name="one"/><!-- ???? -->
      <map code="0xe6d0" name="D"/><!-- ???? -->
      <map code="0xe6d1" name="eight"/><!-- ???? -->
      <map code="0xe6d2" name="o"/><!-- ???? -->
      <map code="0xe6d3" name="zero"/><!-- ???? -->
      <map code="0xe6d4" name="m"/><!-- ???? -->
      <map code="0xe6d5" name="M"/><!-- ???? -->
      <map code="0xe6d6" name="five"/><!-- ???? -->
      <map code="0xe6d7" name="seven"/><!-- ???? -->
      <map code="0xe6d8" name="o"/><!-- ???? -->
      <map code="0xe6d9" name="six"/><!-- ???? -->
      <map code="0xe6da" name="colon"/><!-- ???? -->
      <map code="0xe6db" name="one"/><!-- ???? -->
      <map code="0xe6dc" name="one"/><!-- ???? -->
      <map code="0xe6dd" name="comma"/><!-- ???? -->
      <map code="0xe6de" name="eight"/><!-- ???? -->
      <map code="0xe6df" name="o"/><!-- ???? -->
      <map code="0xe6e0" name="M"/><!-- ???? -->
      <map code="0xe6e1" name="S"/><!-- ???? -->
      <map code="0xe6e2" name="seven"/><!-- ???? -->
      <map code="0xe6e3" name="i"/><!-- ???? -->
      <map code="0xe6e4" name="m"/><!-- ???? -->
      <map code="0xe6e5" name="h"/><!-- ???? -->
      <map code="0xe6e6" name="two"/><!-- ???? -->
      <map code="0xe6e7" name="comma"/><!-- ???? -->
      <map code="0xe6e8" name="s"/><!-- ???? -->
      <map code="0xe6e9" name="i"/><!-- ???? -->
      <map code="0xe6ea" name="h"/><!-- ???? -->
      <map code="0xe6eb" name="M"/><!-- ???? -->
      <map code="0xe6ec" name="w"/><!-- ???? -->
      <map code="0xe6ed" name="g"/><!-- ???? -->
      <map code="0xe6ee" name="i"/><!-- ???? -->
      <map code="0xe6ef" name="two"/><!-- ???? -->
      <map code="0xe6f0" name="n"/><!-- ???? -->
      <map code="0xe6f1" name="period"/><!-- ???? -->
      <map code="0xe6f2" name="three"/><!-- ???? -->
      <map code="0xe6f3" name="F"/><!-- ???? -->
      <map code="0xe6f4" name="eight"/><!-- ???? -->
      <map code="0xe6f5" name="D"/><!-- ???? -->
      <map code="0xe6f6" name="r"/><!-- ???? -->
      <map code="0xe6f7" name="n"/><!-- ???? -->
      <map code="0xe6f8" name="n"/><!-- ???? -->
      <map code="0xe6f9" name="nine"/><!-- ???? -->
      <map code="0xe6fa" name="nine"/><!-- ???? -->
      <map code="0xe6fb" name="period"/><!-- ???? -->
      <map code="0xe6fc" name="nine"/><!-- ???? -->
      <map code="0xe6fd" name="four"/><!-- ???? -->
      <map code="0xe6fe" name="colon"/><!-- ???? -->
      <map code="0xe6ff" name="eight"/><!-- ???? -->
      <map code="0xe700" name="M"/><!-- ???? -->
      <map code="0xe701" name="two"/><!-- ???? -->
      <map code="0xe702" name="s"/><!-- ???? -->
      <map code="0xe703" name="g"/><!-- ???? -->
      <map code="0xe704" name="two"/><!-- ???? -->
      <map code="0xe705" name="D"/><!-- ???? -->
      <map code="0xe706" name="three"/><!-- ???? -->
      <map code="0xe707" name="h"/><!-- ???? -->
      <map code="0xe708" name="h"/><!-- ???? -->
      <map code="0xe709" name="period"/><!-- ???? -->
      <map code="0xe70a" name="r"/><!-- ???? -->
      <map code="0xe70b" name="M"/><!-- ???? -->
      <map code="0xe70c" name="seven"/><!-- ???? -->
      <map code="0xe70d" name="n"/><!-- ???? -->
      <map code="0xe70e" name="S"/><!-- ???? -->
      <map code="0xe70f" name="comma"/><!-- ???? -->
      <map code="0xe710" name="period"/><!-- ???? -->
      <map code="0xe711" name="F"/><!-- ???? -->
      <map code="0xe712" name="D"/><!-- ???? -->
      <map code="0xe713" name="e"/><!-- ???? -->
      <map code="0xe714" name="w"/><!-- ???? -->
      <map code="0xe715" name="t"/><!-- ???? -->
      <map code="0xe716" name="four"/><!-- ???? -->
      <map code="0xe717" name="c"/><!-- ???? -->
      <map code="0xe718" name="e"/><!-- ???? -->
      <map code="0xe719" name="s"/><!-- ???? -->
      <map code="0xe71a" name="three"/><!-- ???? -->
      <map code="0xe71b" name="colon"/><!-- ???? -->
      <map code="0xe71c" name="o"/><!-- ???? -->
      <map code="0xe71d" name="three"/><!-- ???? -->
      <map code="0xe71e" name="c"/><!-- ???? -->
      <map code="0xe71f" name="two"/><!-- ???? -->
      <map code="0xe720" name="n"/><!-- ???? -->
      <map code="0xe721" name="n"/><!-- ???? -->
      <map code="0xe722" name="comma"/><!-- ???? -->
      <map code="0xe723" name="c"/><!-- ???? -->
      <map code="0xe724" name="comma"/><!-- ???? -->
      <map code="0xe725" name="F"/><!-- ???? -->
      <map code="0xe726" name="colon"/><!-- ???? -->
      <map code="0xe727" name="c"/><!-- ???? -->
      <map code="0xe728" name="one"/><!-- ???? -->
      <map code="0xe729" name="g"/><!-- ???? -->
      <map code="0xe72a" name="comma"/><!-- ???? -->
      <map code="0xe72b" name="F"/><!-- ???? -->
      <map code="0xe72c" name="n"/><!-- ???? -->
      <map code="0xe72d" name="six"/><!-- ???? -->
      <map code="0xe72e" name="r"/><!-- ???? -->
      <map code="0xe72f" name="s"/><!-- ???? -->
      <map code="0xe730" name="t"/><!-- ???? -->
      <map code="0xe731" name="a"/><!-- ???? -->
      <map code="0xe732" name="six"/><!-- ???? -->
      <map code="0xe733" name="m"/><!-- ???? -->
      <map code="0xe734" name="M"/><!-- ???? -->
      <map code="0xe735" name="M"/><!-- ???? -->
      <map code="0xe736" name="t"/><!-- ???? -->
      <map code="0xe737" name="S"/><!-- ???? -->
      <map code="0xe738" name="m"/><!-- ???? -->
      <map code="0xe739" name="m"/><!-- ???? -->
      <map code="0xe73a" name="zero"/><!-- ???? -->
      <map code="0xe73b" name="three"/><!-- ???? -->
      <map code="0xe73c" name="a"/><!-- ???? -->
      <map code="0xe73d" name="n"/><!-- ???? -->
      <map code="0xe73e" name="colon"/><!-- ???? -->
      <map code="0xe73f" name="e"/><!-- ???? -->
      <map code="0xe740" name="m"/><!-- ???? -->
      <map code="0xe741" name="S"/><!-- ???? -->
      <map code="0xe742" name="seven"/><!-- ???? -->
      <map code="0xe743" name="h"/><!-- ???? -->
      <map code="0xe744" name="comma"/><!-- ???? -->
      <map code="0xe745" name="colon"/><!-- ???? -->
      <map code="0xe746" name="g"/><!-- ???? -->
      <map code="0xe747" name="one"/><!-- ???? -->
      <map code="0xe748" name="F"/><!-- ???? -->
      <map code="0xe749" name="four"/><!-- ???? -->
      <map code="0xe74a" name="r"/><!-- ???? -->
      <map code="0xe74b" name="S"/><!-- ???? -->
      <map code="0xe74c" name="eight"/><!-- ???? -->
      <map code="0xe74d" name="five"/><!-- ???? -->
      <map code="0xe74e" name="a"/><!-- ???? -->
      <map code="0xe74f" name="M"/><!-- ???? -->
      <map code="0xe750" name="nine"/><!-- ???? -->
      <map code="0xe751" name="n"/><!-- ???? -->
      <map code="0xe752" name="S"/><!-- ???? -->
      <map code="0xe753" name="D"/><!-- ???? -->
      <map code="0xe754" name="S"/><!-- ???? -->
      <map code="0xe755" name="w"/><!-- ???? -->
      <map code="0xe756" name="two"/><!-- ???? -->
      <map code="0xe757" name="nine"/><!-- ???? -->
      <map code="0xe758" name="zero"/><!-- ???? -->
      <map code="0xe759" name="t"/><!-- ???? -->
      <map code="0xe75a" name="six"/><!-- ???? -->
      <map code="0xe75b" name="seven"/><!-- ???? -->
      <map code="0xe75c" name="F"/><!-- ???? -->
      <map code="0xe75d" name="four"/><!-- ???? -->
      <map code="0xe75e" name="m"/><!-- ???? -->
      <map code="0xe75f" name="a"/><!-- ???? -->
      <map code="0xe760" name="eight"/><!-- ???? -->
      <map code="0xe761" name="period"/><!-- ???? -->
      <map code="0xe762" name="five"/><!-- ???? -->
      <map code="0xe763" name="r"/><!-- ???? -->
      <map code="0xe764" name="a"/><!-- ???? -->
      <map code="0xe765" name="period"/><!-- ???? -->
      <map code="0xe766" name="m"/><!-- ???? -->
      <map code="0xe767" name="c"/><!-- ???? -->
      <map code="0xe768" name="five"/><!-- ???? -->
      <map code="0xe769" name="o"/><!-- ???? -->
      <map code="0xe76a" name="four"/><!-- ???? -->
      <map code="0xe76b" name="zero"/><!-- ???? -->
      <map code="0xe76c" name="two"/><!-- ???? -->
      <map code="0xe76d" name="m"/><!-- ???? -->
      <map code="0xe76e" name="o"/><!-- ???? -->
      <map code="0xe76f" name="seven"/><!-- ???? -->
      <map code="0xe770" name="r"/><!-- ???? -->
      <map code="0xe771" name="seven"/><!-- ???? -->
      <map code="0xe772" name="D"/><!-- ???? -->
      <map code="0xe773" name="three"/><!-- ???? -->
      <map code="0xe774" name="e"/><!-- ???? -->
      <map code="0xe775" name="six"/><!-- ???? -->
      <map code="0xe776" name="eight"/><!-- ???? -->
      <map code="0xe777" name="s"/><!-- ???? -->
      <map code="0xe778" name="s"/><!-- ???? -->
      <map code="0xe779" name="three"/><!-- ???? -->
      <map code="0xe77a" name="colon"/><!-- ???? -->
      <map code="0xe77b" name="i"/><!-- ???? -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 71 values pushed */
      91 90 89 88 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65
      64 63 62 61 60 59 58 57 56 55 54 53 49 48 47 46 45 44 40 39 38 37 36 35 34
      33 31 24 20 17 16 15 14 13 11 10 9 8 7 6 5 4 3 2 1 0
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP1[ ]	/* SetRefPoint1 */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        RTG[ ]	/* RoundToGrid */
        ROUND[00]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        70
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        38
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        102
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        64
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        38
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        SCFS[ ]	/* SetCoordFromStackFP */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        SRP0[ ]	/* SetRefPoint0 */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        SVTCA[0]	/* SetFPVectorToAxis */
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        205
        WCVTP[ ]	/* WriteCVTInPixels */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        346
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          141
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        237
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          77
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          13
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        RTG[ ]	/* RoundToGrid */
        ROUND[00]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        70
        SROUND[ ]	/* SuperRound */
        ROUND[00]	/* Round */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        11 10
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        10 11
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        40
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        1 40
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        40
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        2 40
        RCVT[ ]	/* ReadCVT */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        80
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        0
        RS[ ]	/* ReadStore */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[01]	/* Round */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        0
        MAX[ ]	/* Maximum */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 2 values pushed */
        44 192
        ROLL[ ]	/* RollTopThreeStack */
        MIN[ ]	/* Minimum */
        PUSHW[ ]	/* 1 value pushed */
        4096
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        SUB[ ]	/* Subtract */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          SUB[ ]	/* Subtract */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SPVTCA[1]	/* SetPVectorToAxis */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        17
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        41
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        41
        ROFF[ ]	/* RoundOff */
        MIRP[00100]	/* MoveIndirectRelPt */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        44
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        43
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MIRP[10101]	/* MoveIndirectRelPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        MIRP[01101]	/* MoveIndirectRelPt */
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MIRP[10101]	/* MoveIndirectRelPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        MIRP[01101]	/* MoveIndirectRelPt */
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[10101]	/* MoveIndirectRelPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        MIRP[01101]	/* MoveIndirectRelPt */
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          GC[0]	/* GetCoordOnPVector */
          ADD[ ]	/* Add */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 1 value pushed */
          -128
          DIV[ ]	/* Divide */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 2 values pushed */
          12 12
          ROLL[ ]	/* RollTopThreeStack */
          WCVTF[ ]	/* WriteCVTInFUnits */
          RCVT[ ]	/* ReadCVT */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            1
            SUB[ ]	/* Subtract */
            PUSHW[ ]	/* 1 value pushed */
            -70
            MAX[ ]	/* Maximum */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            70
            MIN[ ]	/* Minimum */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          16
          ADD[ ]	/* Add */
          ROUND[00]	/* Round */
          SVTCA[1]	/* SetFPVectorToAxis */
          MSIRP[0]	/* MoveStackIndirRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        19
        LTEQ[ ]	/* LessThenOrEqual */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          8192
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 64 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        192
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          5461
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 128 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          PUSHB[ ]	/* 1 value pushed */
          32
          SUB[ ]	/* Subtract */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          14
          MIRP[10110]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP2[ ]	/* SetRefPoint2 */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          PUSHB[ ]	/* 1 value pushed */
          32
          SUB[ ]	/* Subtract */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          14
          MIRP[10110]	/* MoveIndirectRelPt */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          14
          MIRP[10110]	/* MoveIndirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          14
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          14
          MIRP[01101]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        SROUND[ ]	/* SuperRound */
        ROUND[00]	/* Round */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
          WCVTP[ ]	/* WriteCVTInPixels */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        48 47
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        SUB[ ]	/* Subtract */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          47
          SWAP[ ]	/* SwapTopStack */
          WCVTF[ ]	/* WriteCVTInFUnits */
          PUSHB[ ]	/* 1 value pushed */
          20
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        20
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        0
        ADD[ ]	/* Add */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        ROUND[01]	/* Round */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        47
        RCVT[ ]	/* ReadCVT */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        SWAP[ ]	/* SwapTopStack */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          51 -32
          PUSHB[ ]	/* 2 values pushed */
          52 32
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 4 values pushed */
          51 0 52 0
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        22
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          MINDEX[ ]	/* MoveXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          IF[ ]	/* If */
            ABS[ ]	/* Absolute */
            FLOOR[ ]	/* Floor */
            PUSHB[ ]	/* 1 value pushed */
            31
            ADD[ ]	/* Add */
          ELSE[ ]	/* Else */
            ABS[ ]	/* Absolute */
            PUSHB[ ]	/* 1 value pushed */
            32
            ADD[ ]	/* Add */
            FLOOR[ ]	/* Floor */
            DUP[ ]	/* DuplicateTopStack */
            IF[ ]	/* If */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              64
            EIF[ ]	/* EndIf */
            PUSHB[ ]	/* 1 value pushed */
            1
            SUB[ ]	/* Subtract */
          EIF[ ]	/* EndIf */
          SWAP[ ]	/* SwapTopStack */
          IF[ ]	/* If */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          41
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          41
          MIRP[00000]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        22
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          32
          ADD[ ]	/* Add */
          FLOOR[ ]	/* Floor */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          IF[ ]	/* If */
          ELSE[ ]	/* Else */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          41
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          SFVTL[0]	/* SetFVectorToLine */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            SPVTCA[0]	/* SetPVectorToAxis */
          ELSE[ ]	/* Else */
            SPVTCA[1]	/* SetPVectorToAxis */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          ALIGNRP[ ]	/* AlignRelativePt */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SFVTL[0]	/* SetFVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
          ALIGNRP[ ]	/* AlignRelativePt */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            SVTCA[1]	/* SetFPVectorToAxis */
          ELSE[ ]	/* Else */
            SVTCA[0]	/* SetFPVectorToAxis */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          41
          MIRP[00000]	/* MoveIndirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          41
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          NEG[ ]	/* Negate */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          41
          MIRP[00000]	/* MoveIndirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          SFVTL[0]	/* SetFVectorToLine */
          DUP[ ]	/* DuplicateTopStack */
          IF[ ]	/* If */
            SPVTCA[0]	/* SetPVectorToAxis */
          ELSE[ ]	/* Else */
            SPVTCA[1]	/* SetPVectorToAxis */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          SCFS[ ]	/* SetCoordFromStackFP */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SFVTL[0]	/* SetFVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          RS[ ]	/* ReadStore */
          SCFS[ ]	/* SetCoordFromStackFP */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SPVTCA[0]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        SCFS[ ]	/* SetCoordFromStackFP */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SPVTCA[0]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RS[ ]	/* ReadStore */
        SCFS[ ]	/* SetCoordFromStackFP */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        RTG[ ]	/* RoundToGrid */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          NEG[ ]	/* Negate */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        ROUND[00]	/* Round */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        POP[ ]	/* PopTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          70
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          71
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          72
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          73
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVTL[0]	/* SetFVectorToLine */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        ROLL[ ]	/* RollTopThreeStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -128
        DIV[ ]	/* Divide */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 2 values pushed */
        64 64
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        ROUND[00]	/* Round */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        MD[0]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          ALIGNRP[ ]	/* AlignRelativePt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
        ELSE[ ]	/* Else */
          ROFF[ ]	/* RoundOff */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        18
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        35 1
        GETINFO[ ]	/* GetInfo */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 1
        GETINFO[ ]	/* GetInfo */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          4096 32
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            2 1 2
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          36 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            8192 64
            GETINFO[ ]	/* GetInfo */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              2 2 2
              RS[ ]	/* ReadStore */
              ADD[ ]	/* Add */
              WS[ ]	/* WriteStore */
              PUSHB[ ]	/* 2 values pushed */
              36 1
              GETINFO[ ]	/* GetInfo */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                2 32 2
                RS[ ]	/* ReadStore */
                ADD[ ]	/* Add */
                WS[ ]	/* WriteStore */
                SVTCA[0]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                SVTCA[1]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 4 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                256
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 256
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                512
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 16 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 2 values pushed */
                38 1
                GETINFO[ ]	/* GetInfo */
                LTEQ[ ]	/* LessThenOrEqual */
                IF[ ]	/* If */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 512
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  1024
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 64 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 1024
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  2048
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 128 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          NPUSHB[ ]	/* 10 values pushed */
          5 64 8 64 9 64 12 2 13 2
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 2
          RS[ ]	/* ReadStore */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            5 64 8
            PUSHW[ ]	/* 3 values pushed */
            256 9 256
            PUSHB[ ]	/* 4 values pushed */
            12 1 13 1
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            128 2
            RS[ ]	/* ReadStore */
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 1 value pushed */
              384
              PUSHB[ ]	/* 2 values pushed */
              9 64
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 3 values pushed */
              384 9 320
            EIF[ ]	/* EndIf */
            PUSHW[ ]	/* 2 values pushed */
            16384 128
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            PUSHW[ ]	/* 2 values pushed */
            16384 512
            MUL[ ]	/* Multiply */
            PUSHW[ ]	/* 1 value pushed */
            1024
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        RTG[ ]	/* RoundToGrid */
        ROUND[00]	/* Round */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          64
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            RUTG[ ]	/* RoundUpToGrid */
          EIF[ ]	/* EndIf */
          ROUND[00]	/* Round */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        2
        SWAP[ ]	/* SwapTopStack */
        MIAP[0]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        MIAP[1]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        2
        SWAP[ ]	/* SwapTopStack */
        MIAP[1]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        128
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        1
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          32
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01001]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        89
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[00101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      NPUSHW[ ]	/* 33 values pushed */
      9 319 1 313 85 318 1 313 85 322 320 20 31 321 320 31 31 315 51 314 85 312 51 313 85
      64 263 1 31 263 1 159 260
      NPUSHB[ ]	/* 170 values pushed */
      1 192 253 1 175 253 1 0 253 1 10 79 251 1 32 251 1 245 80 40 31 242 70 40 31
      241 70 42 31 240 70 43 31 95 239 127 239 2 15 239 79 239 95 239 143 239 175 239 5 11
      229 228 30 31 227 226 70 31 15 226 1 64 226 70 22 31 225 224 70 31 207 224 223 224 239
      224 3 64 224 51 54 70 224 70 24 31 238 237 255 31 237 1 232 85 236 72 235 85 234 50
      0 85 233 232 232 85 231 72 0 85 230 0 255 31 221 61 223 85 223 1 3 85 222 61 3
      85 220 3 255 31 15 213 31 213 2 15 213 31 213 2 64 202 24 27 70 207 194 1 189 192
      60 31 193 80 38 31 188 190 40 31 255 185 1 80 184 112 184 128 184 3
      PUSHW[ ]	/* 1 value pushed */
      -64
      NPUSHB[ ]	/* 255 values pushed */
      184 18 50 70 31 183 63 183 79 183 111 183 127 183 159 183 175 183 7 24 182 1 112 178 160
      178 176 178 3 15 178 1 144 181 1 176 181 1 15 181 1 8 15 179 63 179 239 179 3 128
      176 144 176 2 176 176 192 176 208 176 3 47 175 63 175 2 160 173 176 173 2 192 173 208 173
      2 47 172 63 172 2 159 171 1 192 170 208 170 2 79 169 143 169 2 47 169 111 169 191 169
      255 169 4 156 155 36 31 80 155 1 111 150 1 191 150 1 150 70 29 31 149 148 23 31 15
      148 31 148 127 148 143 148 255 148 5 48 145 64 145 2 128 145 1 112 143 128 143 2 144 143
      1 192 143 208 143 2 79 140 95 140 111 140 3 134 70 255 31 159 133 1 132 131 49 31 116
      115 63 31 115 80 38 31 111 110 60 31 110 70 53 31 26 1 24 85 25 51 24 85 7 51
      3 85 6 3 255 31 96 80 38 31 95 80 38 31 92 70 49 31 91 90 72 31 90 70 49
      31 19 50 18 85 5 1 3 85 4 50 3 85 108 3 1 12 3 60 3 76 3 108 3 124
      3 5 239 81 255
      NPUSHB[ ]	/* 100 values pushed */
      81 2 64 81 53 56 70 64 81 37 40 70 207 80 1 73 70 32 31 72 70 53 31 71 70
      53 31 175 70 1 223 70 239 70 2 128 70 1 22 50 21 85 17 1 15 85 16 50 15 85
      2 1 0 85 1 0 1 31 31 15 63 15 95 15 127 15 4 15 15 47 15 79 15 111 15
      143 15 223 15 255 15 7 63 15 127 15 239 15 3 111 0 1 79 0 1 128 22 1 5 1
      PUSHW[ ]	/* 1 value pushed */
      400
      PUSHB[ ]	/* 2 values pushed */
      84 83
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      2047
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      7
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      37
      GTEQ[ ]	/* GreaterThanOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      AND[ ]	/* LogicalAnd */
      PUSHB[ ]	/* 1 value pushed */
      6
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      0
      NEQ[ ]	/* NotEqual */
      AND[ ]	/* LogicalAnd */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      SCANCTRL[ ]	/* ScanConversionControl */
      SCANTYPE[ ]	/* ScanType */
      SCANTYPE[ ]	/* ScanType */
      SVTCA[0]	/* SetFPVectorToAxis */
      WS[ ]	/* WriteStore */
      SCVTCI[ ]	/* SetCVTCutIn */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      50
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        96
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      100
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        64
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      128
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        16
        SCVTCI[ ]	/* SetCVTCutIn */
        PUSHB[ ]	/* 2 values pushed */
        22 0
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      SVTCA[1]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[1]	/* SetFPVectorToAxis */
      SDB[ ]	/* SetDeltaBaseInGState */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      DELTAC3[ ]	/* DeltaExceptionC3 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SDB[ ]	/* SetDeltaBaseInGState */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SDB[ ]	/* SetDeltaBaseInGState */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC2[ ]	/* DeltaExceptionC2 */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SDB[ ]	/* SetDeltaBaseInGState */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[1]	/* SetFPVectorToAxis */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      RTG[ ]	/* RoundToGrid */
      SDB[ ]	/* SetDeltaBaseInGState */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="1484"/>
    <cv index="1" value="1484"/>
    <cv index="2" value="125"/>
    <cv index="3" value="1409"/>
    <cv index="4" value="21"/>
    <cv index="5" value="121"/>
    <cv index="6" value="1409"/>
    <cv index="7" value="21"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="0"/>
    <cv index="11" value="0"/>
    <cv index="12" value="0"/>
    <cv index="13" value="0"/>
    <cv index="14" value="0"/>
    <cv index="15" value="1082"/>
    <cv index="16" value="20"/>
    <cv index="17" value="119"/>
    <cv index="18" value="0"/>
    <cv index="19" value="-20"/>
    <cv index="20" value="0"/>
    <cv index="21" value="0"/>
    <cv index="22" value="-20"/>
    <cv index="23" value="0"/>
    <cv index="24" value="0"/>
    <cv index="25" value="-20"/>
    <cv index="26" value="0"/>
    <cv index="27" value="-425"/>
    <cv index="28" value="0"/>
    <cv index="29" value="0"/>
    <cv index="30" value="0"/>
    <cv index="31" value="0"/>
    <cv index="32" value="0"/>
    <cv index="33" value="0"/>
    <cv index="34" value="0"/>
    <cv index="35" value="0"/>
    <cv index="36" value="0"/>
    <cv index="37" value="0"/>
    <cv index="38" value="0"/>
    <cv index="39" value="0"/>
    <cv index="40" value="0"/>
    <cv index="41" value="0"/>
    <cv index="42" value="0"/>
    <cv index="43" value="0"/>
    <cv index="44" value="0"/>
    <cv index="45" value="0"/>
    <cv index="46" value="0"/>
    <cv index="47" value="0"/>
    <cv index="48" value="0"/>
    <cv index="49" value="0"/>
    <cv index="50" value="0"/>
    <cv index="51" value="0"/>
    <cv index="52" value="0"/>
    <cv index="53" value="0"/>
    <cv index="54" value="0"/>
    <cv index="55" value="0"/>
    <cv index="56" value="0"/>
    <cv index="57" value="0"/>
    <cv index="58" value="0"/>
    <cv index="59" value="0"/>
    <cv index="60" value="0"/>
    <cv index="61" value="0"/>
    <cv index="62" value="0"/>
    <cv index="63" value="0"/>
    <cv index="64" value="0"/>
    <cv index="65" value="0"/>
    <cv index="66" value="0"/>
    <cv index="67" value="2048"/>
    <cv index="68" value="0"/>
    <cv index="69" value="0"/>
    <cv index="70" value="180"/>
    <cv index="71" value="189"/>
    <cv index="72" value="175"/>
    <cv index="73" value="160"/>
    <cv index="74" value="0"/>
    <cv index="75" value="0"/>
    <cv index="76" value="0"/>
    <cv index="77" value="0"/>
    <cv index="78" value="0"/>
    <cv index="79" value="0"/>
    <cv index="80" value="136"/>
    <cv index="81" value="126"/>
    <cv index="82" value="0"/>
    <cv index="83" value="172"/>
    <cv index="84" value="0"/>
    <cv index="85" value="0"/>
    <cv index="86" value="0"/>
    <cv index="87" value="0"/>
    <cv index="88" value="0"/>
    <cv index="89" value="0"/>
    <cv index="90" value="191"/>
    <cv index="91" value="195"/>
    <cv index="92" value="171"/>
    <cv index="93" value="0"/>
    <cv index="94" value="0"/>
    <cv index="95" value="155"/>
    <cv index="96" value="141"/>
    <cv index="97" value="0"/>
    <cv index="98" value="0"/>
    <cv index="99" value="0"/>
    <cv index="100" value="0"/>
    <cv index="101" value="0"/>
    <cv index="102" value="0"/>
    <cv index="103" value="0"/>
    <cv index="104" value="0"/>
    <cv index="105" value="0"/>
    <cv index="106" value="0"/>
    <cv index="107" value="0"/>
    <cv index="108" value="0"/>
    <cv index="109" value="0"/>
    <cv index="110" value="185"/>
    <cv index="111" value="170"/>
    <cv index="112" value="0"/>
    <cv index="113" value="0"/>
    <cv index="114" value="0"/>
    <cv index="115" value="148"/>
    <cv index="116" value="153"/>
    <cv index="117" value="135"/>
    <cv index="118" value="0"/>
    <cv index="119" value="0"/>
    <cv index="120" value="0"/>
    <cv index="121" value="0"/>
    <cv index="122" value="0"/>
    <cv index="123" value="0"/>
    <cv index="124" value="0"/>
    <cv index="125" value="0"/>
    <cv index="126" value="0"/>
    <cv index="127" value="0"/>
    <cv index="128" value="0"/>
    <cv index="129" value="0"/>
    <cv index="130" value="106"/>
    <cv index="131" value="131"/>
    <cv index="132" value="141"/>
    <cv index="133" value="164"/>
    <cv index="134" value="180"/>
    <cv index="135" value="0"/>
    <cv index="136" value="0"/>
    <cv index="137" value="0"/>
    <cv index="138" value="0"/>
    <cv index="139" value="0"/>
    <cv index="140" value="96"/>
    <cv index="141" value="106"/>
    <cv index="142" value="121"/>
    <cv index="143" value="152"/>
    <cv index="144" value="172"/>
    <cv index="145" value="184"/>
    <cv index="146" value="167"/>
    <cv index="147" value="0"/>
    <cv index="148" value="290"/>
    <cv index="149" value="307"/>
    <cv index="150" value="195"/>
    <cv index="151" value="107"/>
    <cv index="152" value="0"/>
    <cv index="153" value="0"/>
    <cv index="154" value="0"/>
    <cv index="155" value="219"/>
    <cv index="156" value="201"/>
    <cv index="157" value="0"/>
    <cv index="158" value="0"/>
    <cv index="159" value="0"/>
    <cv index="160" value="0"/>
    <cv index="161" value="0"/>
    <cv index="162" value="0"/>
    <cv index="163" value="0"/>
    <cv index="164" value="0"/>
    <cv index="165" value="0"/>
    <cv index="166" value="0"/>
    <cv index="167" value="0"/>
    <cv index="168" value="481"/>
    <cv index="169" value="457"/>
    <cv index="170" value="146"/>
    <cv index="171" value="168"/>
    <cv index="172" value="107"/>
    <cv index="173" value="146"/>
    <cv index="174" value="183"/>
    <cv index="175" value="107"/>
    <cv index="176" value="155"/>
    <cv index="177" value="0"/>
    <cv index="178" value="635"/>
    <cv index="179" value="754"/>
    <cv index="180" value="146"/>
    <cv index="181" value="594"/>
    <cv index="182" value="110"/>
    <cv index="183" value="727"/>
    <cv index="184" value="897"/>
    <cv index="185" value="130"/>
    <cv index="186" value="137"/>
    <cv index="187" value="160"/>
    <cv index="188" value="159"/>
    <cv index="189" value="361"/>
    <cv index="190" value="143"/>
    <cv index="191" value="0"/>
    <cv index="192" value="352"/>
    <cv index="193" value="164"/>
    <cv index="194" value="347"/>
    <cv index="195" value="94"/>
    <cv index="196" value="130"/>
    <cv index="197" value="0"/>
    <cv index="198" value="0"/>
    <cv index="199" value="0"/>
    <cv index="200" value="94"/>
    <cv index="201" value="101"/>
    <cv index="202" value="111"/>
    <cv index="203" value="0"/>
    <cv index="204" value="0"/>
    <cv index="205" value="0"/>
    <cv index="206" value="0"/>
    <cv index="207" value="0"/>
    <cv index="208" value="0"/>
    <cv index="209" value="0"/>
    <cv index="210" value="138"/>
    <cv index="211" value="144"/>
    <cv index="212" value="165"/>
    <cv index="213" value="122"/>
    <cv index="214" value="128"/>
    <cv index="215" value="0"/>
    <cv index="216" value="0"/>
    <cv index="217" value="0"/>
    <cv index="218" value="0"/>
    <cv index="219" value="0"/>
    <cv index="220" value="1409"/>
    <cv index="221" value="-13"/>
    <cv index="222" value="13"/>
    <cv index="223" value="-845"/>
    <cv index="224" value="131"/>
    <cv index="225" value="137"/>
    <cv index="226" value="143"/>
    <cv index="227" value="150"/>
    <cv index="228" value="105"/>
    <cv index="229" value="113"/>
    <cv index="230" value="1484"/>
    <cv index="231" value="15"/>
    <cv index="232" value="-994"/>
    <cv index="233" value="-14"/>
    <cv index="234" value="52"/>
    <cv index="235" value="1254"/>
    <cv index="236" value="13"/>
    <cv index="237" value="-300"/>
    <cv index="238" value="191"/>
    <cv index="239" value="799"/>
    <cv index="240" value="167"/>
    <cv index="241" value="174"/>
    <cv index="242" value="181"/>
    <cv index="243" value="0"/>
    <cv index="244" value="0"/>
    <cv index="245" value="129"/>
    <cv index="246" value="0"/>
    <cv index="247" value="0"/>
    <cv index="248" value="0"/>
    <cv index="249" value="0"/>
    <cv index="250" value="1864"/>
    <cv index="251" value="874"/>
    <cv index="252" value="694"/>
    <cv index="253" value="514"/>
    <cv index="254" value="-621"/>
    <cv index="255" value="0"/>
    <cv index="256" value="145"/>
    <cv index="257" value="103"/>
    <cv index="258" value="145"/>
    <cv index="259" value="97"/>
    <cv index="260" value="473"/>
    <cv index="261" value="0"/>
    <cv index="262" value="653"/>
    <cv index="263" value="833"/>
    <cv index="264" value="0"/>
    <cv index="265" value="0"/>
    <cv index="266" value="0"/>
    <cv index="267" value="0"/>
    <cv index="268" value="0"/>
    <cv index="269" value="0"/>
    <cv index="270" value="0"/>
    <cv index="271" value="0"/>
    <cv index="272" value="0"/>
    <cv index="273" value="0"/>
    <cv index="274" value="0"/>
    <cv index="275" value="0"/>
    <cv index="276" value="0"/>
    <cv index="277" value="0"/>
    <cv index="278" value="0"/>
    <cv index="279" value="0"/>
    <cv index="280" value="0"/>
    <cv index="281" value="0"/>
    <cv index="282" value="0"/>
    <cv index="283" value="0"/>
    <cv index="284" value="0"/>
    <cv index="285" value="0"/>
    <cv index="286" value="0"/>
    <cv index="287" value="0"/>
    <cv index="288" value="0"/>
    <cv index="289" value="0"/>
    <cv index="290" value="0"/>
    <cv index="291" value="0"/>
    <cv index="292" value="0"/>
    <cv index="293" value="0"/>
    <cv index="294" value="0"/>
    <cv index="295" value="0"/>
    <cv index="296" value="0"/>
    <cv index="297" value="0"/>
    <cv index="298" value="0"/>
    <cv index="299" value="0"/>
    <cv index="300" value="0"/>
    <cv index="301" value="0"/>
    <cv index="302" value="0"/>
    <cv index="303" value="0"/>
    <cv index="304" value="0"/>
    <cv index="305" value="0"/>
    <cv index="306" value="0"/>
    <cv index="307" value="0"/>
    <cv index="308" value="0"/>
    <cv index="309" value="0"/>
    <cv index="310" value="1665"/>
    <cv index="311" value="1128"/>
    <cv index="312" value="20"/>
    <cv index="313" value="1227"/>
    <cv index="314" value="0"/>
    <cv index="315" value="-20"/>
    <cv index="316" value="-45"/>
    <cv index="317" value="-385"/>
    <cv index="318" value="131"/>
    <cv index="319" value="219"/>
    <cv index="320" value="170"/>
    <cv index="321" value="186"/>
    <cv index="322" value="160"/>
    <cv index="323" value="207"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="205" yMin="0" xMax="1330" yMax="1409">
      <contour>
        <pt x="205" y="1409" on="1"/>
        <pt x="1330" y="1409" on="1"/>
        <pt x="1330" y="0" on="1"/>
        <pt x="205" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="281" y="1333" on="1"/>
        <pt x="281" y="76" on="1"/>
        <pt x="1254" y="76" on="1"/>
        <pt x="1254" y="1333" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 13 values pushed */
          2 6 5 3 6 3 9 8 5 3 4 0 3
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="D" xMin="168" yMin="0" xMax="1381" yMax="1409">
      <contour>
        <pt x="1381" y="719" on="1"/>
        <pt x="1381" y="501" on="0"/>
        <pt x="1211" y="174" on="0"/>
        <pt x="899" y="0" on="0"/>
        <pt x="695" y="0" on="1"/>
        <pt x="168" y="0" on="1"/>
        <pt x="168" y="1409" on="1"/>
        <pt x="634" y="1409" on="1"/>
        <pt x="992" y="1409" on="0"/>
        <pt x="1381" y="1050" on="0"/>
      </contour>
      <contour>
        <pt x="1189" y="719" on="1"/>
        <pt x="1189" y="981" on="0"/>
        <pt x="902" y="1256" on="0"/>
        <pt x="630" y="1256" on="1"/>
        <pt x="359" y="1256" on="1"/>
        <pt x="359" y="153" on="1"/>
        <pt x="673" y="153" on="1"/>
        <pt x="828" y="153" on="0"/>
        <pt x="1063" y="289" on="0"/>
        <pt x="1189" y="545" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 23 values pushed */
          15 5 10 0 5 0 20 21 6 14 95 89 6 3 5 15 95 89 5 18 32 21 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="F" xMin="168" yMin="0" xMax="1169" yMax="1409">
      <contour>
        <pt x="359" y="1253" on="1"/>
        <pt x="359" y="729" on="1"/>
        <pt x="1145" y="729" on="1"/>
        <pt x="1145" y="571" on="1"/>
        <pt x="359" y="571" on="1"/>
        <pt x="359" y="0" on="1"/>
        <pt x="168" y="0" on="1"/>
        <pt x="168" y="1409" on="1"/>
        <pt x="1169" y="1409" on="1"/>
        <pt x="1169" y="1253" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 29 values pushed */
          1 5 5 6 8 2 6 3 10 11 1 4 95 89 1 1 5 7 7 0 95 89 7 3 5
          18 32 11 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="M" xMin="168" yMin="0" xMax="1538" yMax="1409">
      <contour>
        <pt x="1366" y="0" on="1"/>
        <pt x="1366" y="940" on="1"/>
        <pt x="1366" y="1096" on="0"/>
        <pt x="1375" y="1240" on="1"/>
        <pt x="1326" y="1061" on="0"/>
        <pt x="1287" y="960" on="1"/>
        <pt x="923" y="0" on="1"/>
        <pt x="789" y="0" on="1"/>
        <pt x="420" y="960" on="1"/>
        <pt x="364" y="1130" on="1"/>
        <pt x="331" y="1240" on="1"/>
        <pt x="334" y="1129" on="1"/>
        <pt x="338" y="940" on="1"/>
        <pt x="338" y="0" on="1"/>
        <pt x="168" y="0" on="1"/>
        <pt x="168" y="1409" on="1"/>
        <pt x="419" y="1409" on="1"/>
        <pt x="794" y="432" on="1"/>
        <pt x="814" y="373" on="0"/>
        <pt x="851" y="238" on="0"/>
        <pt x="857" y="208" on="1"/>
        <pt x="865" y="248" on="0"/>
        <pt x="916" y="411" on="0"/>
        <pt x="925" y="432" on="1"/>
        <pt x="1293" y="1409" on="1"/>
        <pt x="1538" y="1409" on="1"/>
        <pt x="1538" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 239 values pushed */
          24 0 26 16 13 14 26 14 28 27 3 10 24 10 15 3 0 7 20 3 14 18 144 28 1
          132 28 1 112 28 1 100 28 1 68 28 1 52 28 1 32 28 1 20 28 1 244 28 1 208
          28 1 196 28 1 164 28 1 132 28 1 116 28 1 96 28 1 84 28 1 52 28 1 16 28
          1 4 28 1 103 228 28 1 196 28 1 180 28 1 148 28 1 116 28 1 80 28 1 68 28
          1 36 28 1 4 28 1 244 28 1 212 28 1 180 28 1 132 28 1 100 28 1 68 28 1
          52 28 1 20 28 1 244 28 1 196 28 1 164 28 1 139 28 1 116 28 1 84 28 1 52
          28 1 4 28 1 55 228 28 1 203 28 1 180 28 1 148 28 1 116 28 1 68 28 1 36
          28 1 11 28 1 244 28 1 212 28 1 187 28 1 132 28 1 100 28 1 75 28 1 52 28
          1 20 28 1 251 28 1 228 28 1 196 28 1 164 28 1 128 28 1 2 112 28 1 80 28
          1 64 28 1 63 28 1 32 28 1 0 28 1 7
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="S" xMin="93" yMin="-20" xMax="1272" yMax="1430">
      <contour>
        <pt x="1272" y="389" on="1"/>
        <pt x="1272" y="194" on="0"/>
        <pt x="967" y="-20" on="0"/>
        <pt x="690" y="-20" on="1"/>
        <pt x="175" y="-20" on="0"/>
        <pt x="93" y="338" on="1"/>
        <pt x="278" y="375" on="1"/>
        <pt x="310" y="248" on="0"/>
        <pt x="518" y="129" on="0"/>
        <pt x="697" y="129" on="1"/>
        <pt x="882" y="129" on="0"/>
        <pt x="1083" y="256" on="0"/>
        <pt x="1083" y="379" on="1"/>
        <pt x="1083" y="448" on="0"/>
        <pt x="1020" y="534" on="0"/>
        <pt x="906" y="590" on="0"/>
        <pt x="748" y="628" on="0"/>
        <pt x="652" y="650" on="1"/>
        <pt x="485" y="687" on="0"/>
        <pt x="312" y="761" on="0"/>
        <pt x="212" y="852" on="0"/>
        <pt x="159" y="974" on="0"/>
        <pt x="159" y="1053" on="1"/>
        <pt x="159" y="1234" on="0"/>
        <pt x="436" y="1430" on="0"/>
        <pt x="694" y="1430" on="1"/>
        <pt x="934" y="1430" on="0"/>
        <pt x="1188" y="1283" on="0"/>
        <pt x="1239" y="1106" on="1"/>
        <pt x="1051" y="1073" on="1"/>
        <pt x="1020" y="1185" on="0"/>
        <pt x="846" y="1286" on="0"/>
        <pt x="692" y="1286" on="1"/>
        <pt x="523" y="1286" on="0"/>
        <pt x="345" y="1174" on="0"/>
        <pt x="345" y="1063" on="1"/>
        <pt x="345" y="998" on="0"/>
        <pt x="414" y="913" on="0"/>
        <pt x="544" y="854" on="0"/>
        <pt x="738" y="811" on="1"/>
        <pt x="803" y="796" on="0"/>
        <pt x="932" y="765" on="0"/>
        <pt x="1050" y="722" on="0"/>
        <pt x="1153" y="664" on="0"/>
        <pt x="1229" y="580" on="0"/>
        <pt x="1272" y="466" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 31 values pushed */
          12 0 29 28 35 22 6 5 5 22 28 0 4 47 46 12 16 19 22 72 73 12 89 12 105
          12 3 15 12 1 35
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 57 values pushed */
          19 22 72 70 35 86 35 102 35 3 13 35 1 12 4 12 35 3 25 25 32 95 89 111 29
          1 89 29 1 75 29 1 3 0 29 1 9 5 29 25 4 3 9 95 89 96 6 1 82 6
          1 68 6 1 6 3 19
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="a" xMin="87" yMin="-20" xMax="1139" yMax="1102">
      <contour>
        <pt x="414" y="-20" on="1"/>
        <pt x="251" y="-20" on="0"/>
        <pt x="87" y="152" on="0"/>
        <pt x="87" y="302" on="1"/>
        <pt x="87" y="470" on="0"/>
        <pt x="308" y="650" on="0"/>
        <pt x="554" y="656" on="1"/>
        <pt x="797" y="660" on="1"/>
        <pt x="797" y="719" on="1"/>
        <pt x="797" y="851" on="0"/>
        <pt x="685" y="965" on="0"/>
        <pt x="565" y="965" on="1"/>
        <pt x="444" y="965" on="0"/>
        <pt x="334" y="883" on="0"/>
        <pt x="323" y="793" on="1"/>
        <pt x="135" y="810" on="1"/>
        <pt x="181" y="1102" on="0"/>
        <pt x="569" y="1102" on="1"/>
        <pt x="773" y="1102" on="0"/>
        <pt x="979" y="915" on="0"/>
        <pt x="979" y="738" on="1"/>
        <pt x="979" y="272" on="1"/>
        <pt x="979" y="192" on="0"/>
        <pt x="1021" y="111" on="0"/>
        <pt x="1080" y="111" on="1"/>
        <pt x="1106" y="111" on="0"/>
        <pt x="1139" y="118" on="1"/>
        <pt x="1139" y="6" on="1"/>
        <pt x="1071" y="-10" on="0"/>
        <pt x="1000" y="-10" on="1"/>
        <pt x="900" y="-10" on="0"/>
        <pt x="809" y="95" on="0"/>
        <pt x="803" y="207" on="1"/>
        <pt x="797" y="207" on="1"/>
        <pt x="728" y="83" on="0"/>
        <pt x="545" y="-20" on="0"/>
      </contour>
      <contour>
        <pt x="455" y="115" on="1"/>
        <pt x="554" y="115" on="0"/>
        <pt x="708" y="205" on="0"/>
        <pt x="797" y="362" on="0"/>
        <pt x="797" y="445" on="1"/>
        <pt x="797" y="534" on="1"/>
        <pt x="600" y="530" on="1"/>
        <pt x="473" y="528" on="0"/>
        <pt x="342" y="480" on="0"/>
        <pt x="272" y="380" on="0"/>
        <pt x="272" y="299" on="1"/>
        <pt x="272" y="211" on="0"/>
        <pt x="367" y="115" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 86 values pushed */
          32 41 41 7 7 21 14 15 46 3 3 15 21 26 4 50 49 29 24 81 89 29 22 32 0
          17 7 41 81 89 7 7 17 0 63 14 1 15 14 111 14 2 11 3 14 14 17 17 11 80
          89 17 16 0 36 80 89 0 22 192 50 1 160 50 1 144 50 1 128 50 1 112 50 1 96
          50 1 80 50 1 48 50 1 160 50 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="c" xMin="87" yMin="-20" xMax="970" yMax="1102">
      <contour>
        <pt x="275" y="546" on="1"/>
        <pt x="275" y="330" on="0"/>
        <pt x="411" y="122" on="0"/>
        <pt x="548" y="122" on="1"/>
        <pt x="644" y="122" on="0"/>
        <pt x="773" y="226" on="0"/>
        <pt x="788" y="334" on="1"/>
        <pt x="970" y="322" on="1"/>
        <pt x="949" y="166" on="0"/>
        <pt x="725" y="-20" on="0"/>
        <pt x="553" y="-20" on="1"/>
        <pt x="326" y="-20" on="0"/>
        <pt x="87" y="267" on="0"/>
        <pt x="87" y="542" on="1"/>
        <pt x="87" y="815" on="0"/>
        <pt x="327" y="1102" on="0"/>
        <pt x="551" y="1102" on="1"/>
        <pt x="717" y="1102" on="0"/>
        <pt x="936" y="930" on="0"/>
        <pt x="964" y="779" on="1"/>
        <pt x="779" y="765" on="1"/>
        <pt x="765" y="855" on="0"/>
        <pt x="651" y="961" on="0"/>
        <pt x="546" y="961" on="1"/>
        <pt x="403" y="961" on="0"/>
        <pt x="275" y="771" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 69 values pushed */
          0 13 20 19 6 7 7 19 13 3 26 27 16 23 80 89 31 20 127 20 143 20 223 20 4
          20 20 16 16 32 6 112 6 128 6 208 6 224 6 5 0 6 16 6 96 6 112 6 128 6
          192 6 208 6 7 9 3 6 6 10 10 3 80 89 10 22 31 27 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="colon" xMin="187" yMin="0" xMax="382" yMax="1082">
      <contour>
        <pt x="187" y="875" on="1"/>
        <pt x="187" y="1082" on="1"/>
        <pt x="382" y="1082" on="1"/>
        <pt x="382" y="875" on="1"/>
      </contour>
      <contour>
        <pt x="187" y="0" on="1"/>
        <pt x="187" y="207" on="1"/>
        <pt x="382" y="207" on="1"/>
        <pt x="382" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 19 values pushed */
          3 7 7 4 0 4 9 8 4 5 156 91 4 1 0 156 91 1 15
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="comma" xMin="184" yMin="-262" xMax="385" yMax="219">
      <contour>
        <pt x="385" y="219" on="1"/>
        <pt x="385" y="51" on="1"/>
        <pt x="385" y="-55" on="0"/>
        <pt x="347" y="-197" on="0"/>
        <pt x="307" y="-262" on="1"/>
        <pt x="184" y="-262" on="1"/>
        <pt x="278" y="-126" on="0"/>
        <pt x="278" y="0" on="1"/>
        <pt x="190" y="0" on="1"/>
        <pt x="190" y="219" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 17 values pushed */
          4 5 0 8 5 8 10 11 0 5 168 91 8 0 155 91 8
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="e" xMin="87" yMin="-20" xMax="1048" yMax="1102">
      <contour>
        <pt x="276" y="503" on="1"/>
        <pt x="276" y="317" on="0"/>
        <pt x="430" y="115" on="0"/>
        <pt x="578" y="115" on="1"/>
        <pt x="695" y="115" on="0"/>
        <pt x="836" y="209" on="0"/>
        <pt x="861" y="281" on="1"/>
        <pt x="1019" y="236" on="1"/>
        <pt x="922" y="-20" on="0"/>
        <pt x="578" y="-20" on="1"/>
        <pt x="338" y="-20" on="0"/>
        <pt x="87" y="266" on="0"/>
        <pt x="87" y="548" on="1"/>
        <pt x="87" y="816" on="0"/>
        <pt x="338" y="1102" on="0"/>
        <pt x="571" y="1102" on="1"/>
        <pt x="1048" y="1102" on="0"/>
        <pt x="1048" y="527" on="1"/>
        <pt x="1048" y="503" on="1"/>
      </contour>
      <contour>
        <pt x="862" y="641" on="1"/>
        <pt x="847" y="812" on="0"/>
        <pt x="703" y="969" on="0"/>
        <pt x="568" y="969" on="1"/>
        <pt x="437" y="969" on="0"/>
        <pt x="284" y="794" on="0"/>
        <pt x="278" y="641" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 70 values pushed */
          19 17 6 7 25 0 0 12 12 7 17 3 27 26 6 6 0 3 25 0 80 89 13 25 1
          20 4 25 25 9 15 15 22 80 89 15 16 9 3 80 89 9 22 208 27 1 192 27 1 160
          27 1 144 27 1 128 27 1 112 27 1 96 27 1 80 27 1 48 27 1
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="eight" xMin="89" yMin="-20" xMax="1050" yMax="1430">
      <contour>
        <pt x="1050" y="393" on="1"/>
        <pt x="1050" y="198" on="0"/>
        <pt x="802" y="-20" on="0"/>
        <pt x="570" y="-20" on="1"/>
        <pt x="344" y="-20" on="0"/>
        <pt x="89" y="194" on="0"/>
        <pt x="89" y="391" on="1"/>
        <pt x="89" y="529" on="0"/>
        <pt x="247" y="717" on="0"/>
        <pt x="370" y="737" on="1"/>
        <pt x="370" y="741" on="1"/>
        <pt x="255" y="768" on="0"/>
        <pt x="122" y="948" on="0"/>
        <pt x="122" y="1069" on="1"/>
        <pt x="122" y="1230" on="0"/>
        <pt x="363" y="1430" on="0"/>
        <pt x="566" y="1430" on="1"/>
        <pt x="774" y="1430" on="0"/>
        <pt x="1015" y="1234" on="0"/>
        <pt x="1015" y="1067" on="1"/>
        <pt x="1015" y="946" on="0"/>
        <pt x="881" y="766" on="0"/>
        <pt x="765" y="743" on="1"/>
        <pt x="765" y="739" on="1"/>
        <pt x="900" y="717" on="0"/>
        <pt x="1050" y="532" on="0"/>
      </contour>
      <contour>
        <pt x="828" y="1057" on="1"/>
        <pt x="828" y="1296" on="0"/>
        <pt x="566" y="1296" on="1"/>
        <pt x="439" y="1296" on="0"/>
        <pt x="306" y="1176" on="0"/>
        <pt x="306" y="1057" on="1"/>
        <pt x="306" y="936" on="0"/>
        <pt x="443" y="809" on="0"/>
        <pt x="568" y="809" on="1"/>
        <pt x="695" y="809" on="0"/>
        <pt x="828" y="926" on="0"/>
      </contour>
      <contour>
        <pt x="863" y="410" on="1"/>
        <pt x="863" y="541" on="0"/>
        <pt x="707" y="674" on="0"/>
        <pt x="566" y="674" on="1"/>
        <pt x="429" y="674" on="0"/>
        <pt x="275" y="531" on="0"/>
        <pt x="275" y="406" on="1"/>
        <pt x="275" y="115" on="0"/>
        <pt x="572" y="115" on="1"/>
        <pt x="719" y="115" on="0"/>
        <pt x="863" y="256" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 46 values pushed */
          43 6 31 13 26 19 37 0 0 19 22 9 13 6 6 48 49 22 9 34 40 34 40 117 89
          15 34 1 19 6 34 34 3 16 16 28 117 89 16 7 3 45 117 89 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="five" xMin="82" yMin="-20" xMax="1053" yMax="1409">
      <contour>
        <pt x="1053" y="459" on="1"/>
        <pt x="1053" y="236" on="0"/>
        <pt x="788" y="-20" on="0"/>
        <pt x="553" y="-20" on="1"/>
        <pt x="356" y="-20" on="0"/>
        <pt x="114" y="152" on="0"/>
        <pt x="82" y="315" on="1"/>
        <pt x="264" y="336" on="1"/>
        <pt x="321" y="127" on="0"/>
        <pt x="557" y="127" on="1"/>
        <pt x="702" y="127" on="0"/>
        <pt x="866" y="302" on="0"/>
        <pt x="866" y="455" on="1"/>
        <pt x="866" y="588" on="0"/>
        <pt x="701" y="752" on="0"/>
        <pt x="561" y="752" on="1"/>
        <pt x="488" y="752" on="0"/>
        <pt x="362" y="706" on="0"/>
        <pt x="299" y="651" on="1"/>
        <pt x="123" y="651" on="1"/>
        <pt x="170" y="1409" on="1"/>
        <pt x="971" y="1409" on="1"/>
        <pt x="971" y="1256" on="1"/>
        <pt x="334" y="1256" on="1"/>
        <pt x="307" y="809" on="1"/>
        <pt x="424" y="899" on="0"/>
        <pt x="598" y="899" on="1"/>
        <pt x="806" y="899" on="0"/>
        <pt x="1053" y="655" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 53 values pushed */
          18 19 24 23 20 20 0 19 7 6 24 19 12 0 0 22 19 6 4 29 30 26 15 115 89
          26 26 3 20 20 23 116 89 20 6 3 9 115 89 103 7 1 22 7 1 115 7 131 7 2
          7 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="four" xMin="47" yMin="0" xMax="1079" yMax="1409">
      <contour>
        <pt x="881" y="319" on="1"/>
        <pt x="881" y="0" on="1"/>
        <pt x="711" y="0" on="1"/>
        <pt x="711" y="319" on="1"/>
        <pt x="47" y="319" on="1"/>
        <pt x="47" y="459" on="1"/>
        <pt x="692" y="1409" on="1"/>
        <pt x="881" y="1409" on="1"/>
        <pt x="881" y="461" on="1"/>
        <pt x="1079" y="461" on="1"/>
        <pt x="1079" y="319" on="1"/>
      </contour>
      <contour>
        <pt x="711" y="1206" on="1"/>
        <pt x="709" y="1200" on="0"/>
        <pt x="657" y="1106" on="0"/>
        <pt x="644" y="1087" on="1"/>
        <pt x="283" y="555" on="1"/>
        <pt x="229" y="481" on="1"/>
        <pt x="213" y="461" on="1"/>
        <pt x="711" y="461" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 26 values pushed */
          17 5 18 2 2 8 1 5 1 19 20 0 4 17 4 115 89 8 17 17 1 11 6 6 1
          24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="g" xMin="86" yMin="-425" xMax="1007" yMax="1099">
      <contour>
        <pt x="548" y="-425" on="1"/>
        <pt x="371" y="-425" on="0"/>
        <pt x="161" y="-286" on="0"/>
        <pt x="131" y="-158" on="1"/>
        <pt x="312" y="-132" on="1"/>
        <pt x="330" y="-207" on="0"/>
        <pt x="453" y="-288" on="0"/>
        <pt x="553" y="-288" on="1"/>
        <pt x="822" y="-288" on="0"/>
        <pt x="822" y="27" on="1"/>
        <pt x="822" y="201" on="1"/>
        <pt x="820" y="201" on="1"/>
        <pt x="769" y="97" on="0"/>
        <pt x="591" y="-8" on="0"/>
        <pt x="472" y="-8" on="1"/>
        <pt x="273" y="-8" on="0"/>
        <pt x="86" y="256" on="0"/>
        <pt x="86" y="539" on="1"/>
        <pt x="86" y="826" on="0"/>
        <pt x="287" y="1099" on="0"/>
        <pt x="492" y="1099" on="1"/>
        <pt x="607" y="1099" on="0"/>
        <pt x="776" y="994" on="0"/>
        <pt x="822" y="897" on="1"/>
        <pt x="824" y="897" on="1"/>
        <pt x="824" y="927" on="0"/>
        <pt x="832" y="1075" on="0"/>
        <pt x="836" y="1082" on="1"/>
        <pt x="1007" y="1082" on="1"/>
        <pt x="1001" y="1028" on="0"/>
        <pt x="1001" y="858" on="1"/>
        <pt x="1001" y="31" on="1"/>
        <pt x="1001" y="-425" on="0"/>
      </contour>
      <contour>
        <pt x="822" y="541" on="1"/>
        <pt x="822" y="673" on="0"/>
        <pt x="750" y="864" on="0"/>
        <pt x="619" y="965" on="0"/>
        <pt x="536" y="965" on="1"/>
        <pt x="398" y="965" on="0"/>
        <pt x="272" y="765" on="0"/>
        <pt x="272" y="541" on="1"/>
        <pt x="272" y="319" on="0"/>
        <pt x="390" y="125" on="0"/>
        <pt x="533" y="125" on="1"/>
        <pt x="618" y="125" on="0"/>
        <pt x="750" y="225" on="0"/>
        <pt x="822" y="412" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 100 values pushed */
          33 23 9 9 31 4 3 40 17 17 3 31 3 48 47 28 15 23 10 20 14 20 37 80 89
          20 16 14 43 80 89 14 22 0 7 80 89 21 4 1 6 4 1 11 4 0 27 64 48 1
          32 48 1 207 48 1 176 48 1 144 48 1 32 48 1 0 48 1 80 223 48 1 192 48 1
          79 48 1 160 48 1 128 48 1 47 48 1 15 48 1 240 48 1 208 48 1 15 48 1 8
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="h" xMin="142" yMin="0" xMax="1006" yMax="1484">
      <contour>
        <pt x="317" y="897" on="1"/>
        <pt x="375" y="1003" on="0"/>
        <pt x="538" y="1102" on="0"/>
        <pt x="663" y="1102" on="1"/>
        <pt x="839" y="1102" on="0"/>
        <pt x="1006" y="927" on="0"/>
        <pt x="1006" y="721" on="1"/>
        <pt x="1006" y="0" on="1"/>
        <pt x="825" y="0" on="1"/>
        <pt x="825" y="686" on="1"/>
        <pt x="825" y="800" on="0"/>
        <pt x="783" y="911" on="0"/>
        <pt x="687" y="963" on="0"/>
        <pt x="602" y="963" on="1"/>
        <pt x="475" y="963" on="0"/>
        <pt x="322" y="787" on="0"/>
        <pt x="322" y="638" on="1"/>
        <pt x="322" y="0" on="1"/>
        <pt x="142" y="0" on="1"/>
        <pt x="142" y="1484" on="1"/>
        <pt x="322" y="1484" on="1"/>
        <pt x="322" y="1098" on="1"/>
        <pt x="322" y="1037" on="0"/>
        <pt x="315" y="907" on="0"/>
        <pt x="314" y="897" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 59 values pushed */
          21 17 17 18 8 7 18 7 25 26 19 0 0 3 18 7 21 3 13 80 89 3 16 208 26
          1 192 26 1 176 26 1 240 26 1 176 26 1 255 26 1 224 26 1 208 26 1 192 26 1
          176 26 1 160 26 1 112 26 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIAP[1]	/* MoveIndirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="i" xMin="137" yMin="0" xMax="317" yMax="1484">
      <contour>
        <pt x="137" y="1312" on="1"/>
        <pt x="137" y="1484" on="1"/>
        <pt x="317" y="1484" on="1"/>
        <pt x="317" y="1312" on="1"/>
      </contour>
      <contour>
        <pt x="137" y="0" on="1"/>
        <pt x="137" y="1082" on="1"/>
        <pt x="317" y="1082" on="1"/>
        <pt x="317" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 72 values pushed */
          3 7 7 0 4 4 8 9 5 15 4 21 1 0 83 89 1 0 255 9 1 224 9 1 223
          9 1 192 9 1 176 9 1 159 9 1 128 9 1 112 9 1 31 9 1 0 9 1 240 9
          1 223 9 1 192 9 1 176 9 1 160 9 1 144 9 1 79 9 1 31 9 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="m" xMin="136" yMin="0" xMax="1571" yMax="1102">
      <contour>
        <pt x="768" y="0" on="1"/>
        <pt x="768" y="686" on="1"/>
        <pt x="768" y="843" on="0"/>
        <pt x="682" y="963" on="0"/>
        <pt x="570" y="963" on="1"/>
        <pt x="455" y="963" on="0"/>
        <pt x="321" y="787" on="0"/>
        <pt x="321" y="627" on="1"/>
        <pt x="321" y="0" on="1"/>
        <pt x="142" y="0" on="1"/>
        <pt x="142" y="851" on="1"/>
        <pt x="142" y="1040" on="0"/>
        <pt x="136" y="1082" on="1"/>
        <pt x="306" y="1082" on="1"/>
        <pt x="307" y="1077" on="0"/>
        <pt x="309" y="1033" on="0"/>
        <pt x="312" y="976" on="0"/>
        <pt x="314" y="897" on="1"/>
        <pt x="317" y="897" on="1"/>
        <pt x="375" y="1012" on="0"/>
        <pt x="525" y="1102" on="0"/>
        <pt x="633" y="1102" on="1"/>
        <pt x="756" y="1102" on="0"/>
        <pt x="899" y="1004" on="0"/>
        <pt x="927" y="897" on="1"/>
        <pt x="930" y="897" on="1"/>
        <pt x="986" y="1006" on="0"/>
        <pt x="1145" y="1102" on="0"/>
        <pt x="1258" y="1102" on="1"/>
        <pt x="1422" y="1102" on="0"/>
        <pt x="1571" y="924" on="0"/>
        <pt x="1571" y="721" on="1"/>
        <pt x="1571" y="0" on="1"/>
        <pt x="1393" y="0" on="1"/>
        <pt x="1393" y="686" on="1"/>
        <pt x="1393" y="843" on="0"/>
        <pt x="1307" y="963" on="0"/>
        <pt x="1195" y="963" on="1"/>
        <pt x="1077" y="963" on="0"/>
        <pt x="946" y="788" on="0"/>
        <pt x="946" y="627" on="1"/>
        <pt x="946" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 255 values pushed */
          24 41 0 0 33 9 33 32 18 8 9 32 9 43 42 28 37 80 89 28 16 24 17 0 21
          21 4 80 89 21 16 12 15 33 9 0 21 100 43 1 75 43 1 63 43 1 43 43 1 31
          43 1 15 43 1 235 43 1 223 43 1 187 43 1 171 43 1 139 43 1 123 43 1 111 43
          1 59 43 1 31 43 1 11 43 1 106 235 43 1 203 43 1 187 43 1 175 43 1 139 43
          1 127 43 1 91 43 1 79 43 1 27 43 1 251 43 1 239 43 1 223 43 1 203 43 1
          187 43 1 175 43 1 148 43 1 100 43 1 75 43 1 43 43 1 27 43 1 4 43 1 244
          43 1 219 43 1 171 43 1 139 43 1 127 43 1 107 43 1 52 43 1 27 43 1 15 43
          1 57 251 43 1 219 43 1 187 43 1 160 43 1 148 43 1 116 43 1 91 43 1 75 43
          1 43 43 1 31 43 1 11 43 1 251 43 1 235 43 1 203 43 1 164 43 1 123 43 1
          91 43 1 75 43 1 27 43 1 244 43 1 208 43 1 2 192 43 1 160 43 1 144 43 1
          96 43 1 79 43
          NPUSHB[ ]	/* 11 values pushed */
          1 48 43 1 47 43 1 0 43 1 8
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="n" xMin="136" yMin="0" xMax="1006" yMax="1102">
      <contour>
        <pt x="825" y="0" on="1"/>
        <pt x="825" y="686" on="1"/>
        <pt x="825" y="793" on="0"/>
        <pt x="783" y="911" on="0"/>
        <pt x="691" y="963" on="0"/>
        <pt x="602" y="963" on="1"/>
        <pt x="472" y="963" on="0"/>
        <pt x="322" y="785" on="0"/>
        <pt x="322" y="627" on="1"/>
        <pt x="322" y="0" on="1"/>
        <pt x="142" y="0" on="1"/>
        <pt x="142" y="851" on="1"/>
        <pt x="142" y="1040" on="0"/>
        <pt x="136" y="1082" on="1"/>
        <pt x="306" y="1082" on="1"/>
        <pt x="307" y="1077" on="0"/>
        <pt x="309" y="1033" on="0"/>
        <pt x="312" y="976" on="0"/>
        <pt x="314" y="897" on="1"/>
        <pt x="317" y="897" on="1"/>
        <pt x="379" y="1009" on="0"/>
        <pt x="542" y="1102" on="0"/>
        <pt x="663" y="1102" on="1"/>
        <pt x="841" y="1102" on="0"/>
        <pt x="1006" y="925" on="0"/>
        <pt x="1006" y="721" on="1"/>
        <pt x="1006" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 60 values pushed */
          18 9 9 10 0 26 10 26 27 28 18 22 0 22 5 80 89 22 16 13 15 10 0 21 208
          28 1 192 28 1 176 28 1 240 28 1 176 28 1 255 28 1 224 28 1 208 28 1 192 28
          1 176 28 1 160 28 1 112 28 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="nine" xMin="96" yMin="-20" xMax="1042" yMax="1430">
      <contour>
        <pt x="1042" y="733" on="1"/>
        <pt x="1042" y="370" on="0"/>
        <pt x="777" y="-20" on="0"/>
        <pt x="532" y="-20" on="1"/>
        <pt x="367" y="-20" on="0"/>
        <pt x="168" y="119" on="0"/>
        <pt x="125" y="274" on="1"/>
        <pt x="297" y="301" on="1"/>
        <pt x="351" y="125" on="0"/>
        <pt x="535" y="125" on="1"/>
        <pt x="690" y="125" on="0"/>
        <pt x="860" y="413" on="0"/>
        <pt x="864" y="680" on="1"/>
        <pt x="824" y="590" on="0"/>
        <pt x="630" y="481" on="0"/>
        <pt x="514" y="481" on="1"/>
        <pt x="324" y="481" on="0"/>
        <pt x="96" y="741" on="0"/>
        <pt x="96" y="956" on="1"/>
        <pt x="96" y="1177" on="0"/>
        <pt x="344" y="1430" on="0"/>
        <pt x="565" y="1430" on="1"/>
        <pt x="800" y="1430" on="0"/>
        <pt x="1042" y="1082" on="0"/>
      </contour>
      <contour>
        <pt x="846" y="907" on="1"/>
        <pt x="846" y="1077" on="0"/>
        <pt x="690" y="1284" on="0"/>
        <pt x="559" y="1284" on="1"/>
        <pt x="429" y="1284" on="0"/>
        <pt x="279" y="1107" on="0"/>
        <pt x="279" y="956" on="1"/>
        <pt x="279" y="802" on="0"/>
        <pt x="429" y="623" on="0"/>
        <pt x="557" y="623" on="1"/>
        <pt x="635" y="623" on="0"/>
        <pt x="769" y="694" on="0"/>
        <pt x="846" y="824" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 46 values pushed */
          30 18 7 6 24 12 0 0 6 18 3 37 38 12 33 15 33 115 89 15 15 31 15 2 14
          3 15 15 3 21 21 27 115 89 21 7 3 9 115 89 23 7 1 7 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="o" xMin="86" yMin="-20" xMax="1053" yMax="1102">
      <contour>
        <pt x="1053" y="542" on="1"/>
        <pt x="1053" y="258" on="0"/>
        <pt x="803" y="-20" on="0"/>
        <pt x="565" y="-20" on="1"/>
        <pt x="328" y="-20" on="0"/>
        <pt x="86" y="269" on="0"/>
        <pt x="86" y="542" on="1"/>
        <pt x="86" y="1102" on="0"/>
        <pt x="571" y="1102" on="1"/>
        <pt x="819" y="1102" on="0"/>
        <pt x="1053" y="829" on="0"/>
      </contour>
      <contour>
        <pt x="864" y="542" on="1"/>
        <pt x="864" y="766" on="0"/>
        <pt x="731" y="969" on="0"/>
        <pt x="574" y="969" on="1"/>
        <pt x="416" y="969" on="0"/>
        <pt x="275" y="762" on="0"/>
        <pt x="275" y="542" on="1"/>
        <pt x="275" y="328" on="0"/>
        <pt x="414" y="113" on="0"/>
        <pt x="563" y="113" on="1"/>
        <pt x="725" y="113" on="0"/>
        <pt x="864" y="321" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 44 values pushed */
          17 6 11 0 6 0 23 24 8 14 80 89 8 16 3 20 80 89 3 22 160 24 1 144 24
          1 128 24 1 112 24 1 96 24 1 80 24 1 48 24 1 223 24 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="one" xMin="156" yMin="0" xMax="1039" yMax="1409">
      <contour>
        <pt x="156" y="0" on="1"/>
        <pt x="156" y="153" on="1"/>
        <pt x="515" y="153" on="1"/>
        <pt x="515" y="1237" on="1"/>
        <pt x="197" y="1010" on="1"/>
        <pt x="197" y="1180" on="1"/>
        <pt x="530" y="1409" on="1"/>
        <pt x="696" y="1409" on="1"/>
        <pt x="696" y="153" on="1"/>
        <pt x="1039" y="153" on="1"/>
        <pt x="1039" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          4 8 2 2 11 12 5 4 4 3 6 6 8 1 0 1 116 89 0 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="period" xMin="187" yMin="0" xMax="382" yMax="219">
      <contour>
        <pt x="187" y="0" on="1"/>
        <pt x="187" y="219" on="1"/>
        <pt x="382" y="219" on="1"/>
        <pt x="382" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 10 values pushed */
          3 0 0 4 5 0 1 155 91 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="r" xMin="136" yMin="0" xMax="648" yMax="1102">
      <contour>
        <pt x="142" y="0" on="1"/>
        <pt x="142" y="830" on="1"/>
        <pt x="142" y="944" on="0"/>
        <pt x="136" y="1082" on="1"/>
        <pt x="306" y="1082" on="1"/>
        <pt x="314" y="898" on="0"/>
        <pt x="314" y="861" on="1"/>
        <pt x="318" y="861" on="1"/>
        <pt x="361" y="1000" on="0"/>
        <pt x="473" y="1102" on="0"/>
        <pt x="575" y="1102" on="1"/>
        <pt x="611" y="1102" on="0"/>
        <pt x="648" y="1092" on="1"/>
        <pt x="648" y="927" on="1"/>
        <pt x="612" y="937" on="0"/>
        <pt x="552" y="937" on="1"/>
        <pt x="440" y="937" on="0"/>
        <pt x="322" y="744" on="0"/>
        <pt x="322" y="564" on="1"/>
        <pt x="322" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 16 values pushed */
          6 19 19 0 0 12 20 21 15 6 10 16 4 15 0 21
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="s" xMin="57" yMin="-20" xMax="950" yMax="1099">
      <contour>
        <pt x="950" y="299" on="1"/>
        <pt x="950" y="146" on="0"/>
        <pt x="719" y="-20" on="0"/>
        <pt x="511" y="-20" on="1"/>
        <pt x="309" y="-20" on="0"/>
        <pt x="90" y="113" on="0"/>
        <pt x="57" y="254" on="1"/>
        <pt x="216" y="285" on="1"/>
        <pt x="239" y="198" on="0"/>
        <pt x="383" y="117" on="0"/>
        <pt x="511" y="117" on="1"/>
        <pt x="648" y="117" on="0"/>
        <pt x="775" y="201" on="0"/>
        <pt x="775" y="285" on="1"/>
        <pt x="775" y="349" on="0"/>
        <pt x="687" y="429" on="0"/>
        <pt x="589" y="455" on="1"/>
        <pt x="460" y="489" on="1"/>
        <pt x="305" y="529" on="0"/>
        <pt x="174" y="606" on="0"/>
        <pt x="100" y="716" on="0"/>
        <pt x="100" y="796" on="1"/>
        <pt x="100" y="944" on="0"/>
        <pt x="311" y="1099" on="0"/>
        <pt x="513" y="1099" on="1"/>
        <pt x="692" y="1099" on="0"/>
        <pt x="903" y="973" on="0"/>
        <pt x="931" y="834" on="1"/>
        <pt x="769" y="814" on="1"/>
        <pt x="754" y="886" on="0"/>
        <pt x="623" y="963" on="0"/>
        <pt x="513" y="963" on="1"/>
        <pt x="391" y="963" on="0"/>
        <pt x="275" y="889" on="0"/>
        <pt x="275" y="814" on="1"/>
        <pt x="275" y="768" on="0"/>
        <pt x="323" y="708" on="0"/>
        <pt x="417" y="666" on="0"/>
        <pt x="568" y="629" on="1"/>
        <pt x="711" y="593" on="0"/>
        <pt x="837" y="532" on="0"/>
        <pt x="910" y="458" on="0"/>
        <pt x="950" y="361" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 60 values pushed */
          7 6 34 21 28 27 13 0 0 27 21 6 4 43 44 13 34 3 24 24 31 80 89 28 24
          16 3 10 80 89 7 3 22 16 44 1 0 44 1 240 44 1 224 44 1 192 44 1 96 44
          1 128 44 1 63 44 1 16 44 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="seven" xMin="105" yMin="0" xMax="1036" yMax="1409">
      <contour>
        <pt x="1036" y="1263" on="1"/>
        <pt x="820" y="933" on="0"/>
        <pt x="642" y="559" on="0"/>
        <pt x="553" y="195" on="0"/>
        <pt x="553" y="0" on="1"/>
        <pt x="365" y="0" on="1"/>
        <pt x="365" y="270" on="0"/>
        <pt x="594" y="867" on="0"/>
        <pt x="862" y="1256" on="1"/>
        <pt x="105" y="1256" on="1"/>
        <pt x="105" y="1409" on="1"/>
        <pt x="1036" y="1409" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          8 4 5 5 0 9 9 0 12 13 0 9 10 9 116 89 10 6 4 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="six" xMin="104" yMin="-20" xMax="1049" yMax="1430">
      <contour>
        <pt x="1049" y="461" on="1"/>
        <pt x="1049" y="238" on="0"/>
        <pt x="807" y="-20" on="0"/>
        <pt x="594" y="-20" on="1"/>
        <pt x="356" y="-20" on="0"/>
        <pt x="104" y="334" on="0"/>
        <pt x="104" y="672" on="1"/>
        <pt x="104" y="1038" on="0"/>
        <pt x="366" y="1430" on="0"/>
        <pt x="608" y="1430" on="1"/>
        <pt x="927" y="1430" on="0"/>
        <pt x="1010" y="1143" on="1"/>
        <pt x="838" y="1112" on="1"/>
        <pt x="785" y="1284" on="0"/>
        <pt x="606" y="1284" on="1"/>
        <pt x="452" y="1284" on="0"/>
        <pt x="283" y="997" on="0"/>
        <pt x="283" y="725" on="1"/>
        <pt x="332" y="816" on="0"/>
        <pt x="510" y="911" on="0"/>
        <pt x="625" y="911" on="1"/>
        <pt x="820" y="911" on="0"/>
        <pt x="1049" y="667" on="0"/>
      </contour>
      <contour>
        <pt x="866" y="453" on="1"/>
        <pt x="866" y="606" on="0"/>
        <pt x="716" y="772" on="0"/>
        <pt x="582" y="772" on="1"/>
        <pt x="456" y="772" on="0"/>
        <pt x="301" y="625" on="0"/>
        <pt x="301" y="496" on="1"/>
        <pt x="301" y="333" on="0"/>
        <pt x="462" y="125" on="0"/>
        <pt x="588" y="125" on="1"/>
        <pt x="718" y="125" on="0"/>
        <pt x="866" y="300" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 43 values pushed */
          29 17 6 12 11 23 0 0 11 6 3 35 36 17 26 20 26 117 89 20 20 3 9 9 14
          115 89 15 12 143 12 2 10 5 12 9 7 3 32 115 89 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="t" xMin="31" yMin="-16" xMax="554" yMax="1324">
      <contour>
        <pt x="554" y="8" on="1"/>
        <pt x="465" y="-16" on="0"/>
        <pt x="372" y="-16" on="1"/>
        <pt x="156" y="-16" on="0"/>
        <pt x="156" y="229" on="1"/>
        <pt x="156" y="951" on="1"/>
        <pt x="31" y="951" on="1"/>
        <pt x="31" y="1082" on="1"/>
        <pt x="163" y="1082" on="1"/>
        <pt x="216" y="1324" on="1"/>
        <pt x="336" y="1324" on="1"/>
        <pt x="336" y="1082" on="1"/>
        <pt x="536" y="1082" on="1"/>
        <pt x="536" y="951" on="1"/>
        <pt x="336" y="951" on="1"/>
        <pt x="336" y="268" on="1"/>
        <pt x="336" y="190" on="0"/>
        <pt x="387" y="127" on="0"/>
        <pt x="450" y="127" on="1"/>
        <pt x="486" y="127" on="0"/>
        <pt x="554" y="141" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 36 values pushed */
          13 20 20 11 15 15 9 4 4 22 21 14 5 8 5 80 89 11 15 9 1 12 3 9 64
          8 15 2 18 80 89 2 22 128 22 1
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01101]	/* MoveDirectRelPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="three" xMin="78" yMin="-20" xMax="1049" yMax="1430">
      <contour>
        <pt x="1049" y="389" on="1"/>
        <pt x="1049" y="194" on="0"/>
        <pt x="801" y="-20" on="0"/>
        <pt x="571" y="-20" on="1"/>
        <pt x="357" y="-20" on="0"/>
        <pt x="102" y="173" on="0"/>
        <pt x="78" y="362" on="1"/>
        <pt x="264" y="379" on="1"/>
        <pt x="300" y="129" on="0"/>
        <pt x="571" y="129" on="1"/>
        <pt x="707" y="129" on="0"/>
        <pt x="862" y="263" on="0"/>
        <pt x="862" y="395" on="1"/>
        <pt x="862" y="510" on="0"/>
        <pt x="685" y="639" on="0"/>
        <pt x="518" y="639" on="1"/>
        <pt x="416" y="639" on="1"/>
        <pt x="416" y="795" on="1"/>
        <pt x="514" y="795" on="1"/>
        <pt x="662" y="795" on="0"/>
        <pt x="825" y="924" on="0"/>
        <pt x="825" y="1038" on="1"/>
        <pt x="825" y="1151" on="0"/>
        <pt x="692" y="1282" on="0"/>
        <pt x="561" y="1282" on="1"/>
        <pt x="442" y="1282" on="0"/>
        <pt x="295" y="1160" on="0"/>
        <pt x="283" y="1049" on="1"/>
        <pt x="102" y="1063" on="1"/>
        <pt x="122" y="1236" on="0"/>
        <pt x="369" y="1430" on="0"/>
        <pt x="563" y="1430" on="1"/>
        <pt x="775" y="1430" on="0"/>
        <pt x="1010" y="1233" on="0"/>
        <pt x="1010" y="1057" on="1"/>
        <pt x="1010" y="922" on="0"/>
        <pt x="859" y="753" on="0"/>
        <pt x="715" y="723" on="1"/>
        <pt x="715" y="719" on="1"/>
        <pt x="873" y="702" on="0"/>
        <pt x="1049" y="524" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 57 values pushed */
          7 6 27 28 21 34 12 0 0 34 37 16 28 6 6 41 42 37 17 16 17 16 116 89 17
          24 19 130 77 17 24 19 1 77 15 17 1 16 5 17 17 3 27 31 31 24 115 89 31 7
          3 9 115 89 7 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="two" xMin="103" yMin="0" xMax="1036" yMax="1430">
      <contour>
        <pt x="103" y="0" on="1"/>
        <pt x="103" y="127" on="1"/>
        <pt x="154" y="244" on="0"/>
        <pt x="301" y="423" on="0"/>
        <pt x="463" y="568" on="0"/>
        <pt x="622" y="692" on="0"/>
        <pt x="750" y="816" on="0"/>
        <pt x="829" y="952" on="0"/>
        <pt x="829" y="1038" on="1"/>
        <pt x="829" y="1154" on="0"/>
        <pt x="693" y="1282" on="0"/>
        <pt x="572" y="1282" on="1"/>
        <pt x="457" y="1282" on="0"/>
        <pt x="308" y="1157" on="0"/>
        <pt x="295" y="1044" on="1"/>
        <pt x="111" y="1061" on="1"/>
        <pt x="131" y="1230" on="0"/>
        <pt x="378" y="1430" on="0"/>
        <pt x="572" y="1430" on="1"/>
        <pt x="785" y="1430" on="0"/>
        <pt x="1014" y="1229" on="0"/>
        <pt x="1014" y="1044" on="1"/>
        <pt x="1014" y="962" on="0"/>
        <pt x="939" y="800" on="0"/>
        <pt x="791" y="638" on="0"/>
        <pt x="582" y="468" on="1"/>
        <pt x="467" y="374" on="0"/>
        <pt x="331" y="223" on="0"/>
        <pt x="301" y="153" on="1"/>
        <pt x="1036" y="153" on="1"/>
        <pt x="1036" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 32 values pushed */
          28 0 14 15 8 21 29 21 15 0 4 31 32 8 28 14 18 18 11 115 89 18 7 1 0
          28 0 28 116 89 0 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="w" xMin="-3" yMin="0" xMax="1484" yMax="1082">
      <contour>
        <pt x="1174" y="0" on="1"/>
        <pt x="965" y="0" on="1"/>
        <pt x="776" y="765" on="1"/>
        <pt x="740" y="934" on="1"/>
        <pt x="731" y="889" on="0"/>
        <pt x="693" y="720" on="0"/>
        <pt x="508" y="0" on="1"/>
        <pt x="300" y="0" on="1"/>
        <pt x="-3" y="1082" on="1"/>
        <pt x="175" y="1082" on="1"/>
        <pt x="358" y="347" on="1"/>
        <pt x="365" y="323" on="0"/>
        <pt x="401" y="149" on="1"/>
        <pt x="418" y="223" on="1"/>
        <pt x="644" y="1082" on="1"/>
        <pt x="837" y="1082" on="1"/>
        <pt x="1026" y="339" on="1"/>
        <pt x="1072" y="149" on="1"/>
        <pt x="1103" y="288" on="1"/>
        <pt x="1308" y="1082" on="1"/>
        <pt x="1484" y="1082" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 255 values pushed */
          1 0 17 7 6 12 15 14 3 19 9 12 3 17 3 20 8 7 20 1 20 22 8 8 1
          11 8 21 3 14 19 3 8 15 1 12 17 3 7 21 118 22 1 102 22 1 84 22 1 70
          22 1 54 22 1 36 22 1 22 22 1 4 22 1 244 22 1 230 22 1 196 22 1 178 22
          1 164 22 1 150 22 1 134 22 1 102 22 1 84 22 1 68 22 1 54 22 1 20 22 1
          6 22 1 105 246 22 1 226 22 1 212 22 1 198 22 1 182 22 1 150 22 1 132 22 1
          116 22 1 102 22 1 70 22 1 54 22 1 36 22 1 22 22 1 6 22 1 244 22 1 230
          22 1 182 22 1 164 22 1 148 22 1 134 22 1 105 22 1 86 22 1 68 22 1 54 22
          1 6 22 1 228 22 1 214 22 1 196 22 1 182 22 1 166 22 1 137 22 1 114 22 1
          1 96 22 1 84 22 1 36 22 1 4 22 1 56 244 22 1 212 22 1 196 22 1 164 22
          1 128 22 1 116 22 1 75 22 1 48 22 1 36 22 1 20 22 1 251 22 1 196 22 1
          160 22 1 148 22
          NPUSHB[ ]	/* 48 values pushed */
          1 123 22 1 100 22 1 68 22 1 52 22 1 27 22 1 240 22 1 228 22 1 203 22 1
          180 22 1 148 22 1 132 22 1 100 22 1 63 22 1 2 16 22 1 0 22 1 8
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          MIAP[1]	/* MoveIndirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="zero" xMin="80" yMin="-20" xMax="1059" yMax="1430">
      <contour>
        <pt x="1059" y="705" on="1"/>
        <pt x="1059" y="352" on="0"/>
        <pt x="810" y="-20" on="0"/>
        <pt x="567" y="-20" on="1"/>
        <pt x="324" y="-20" on="0"/>
        <pt x="80" y="350" on="0"/>
        <pt x="80" y="705" on="1"/>
        <pt x="80" y="1068" on="0"/>
        <pt x="317" y="1430" on="0"/>
        <pt x="573" y="1430" on="1"/>
        <pt x="822" y="1430" on="0"/>
        <pt x="1059" y="1064" on="0"/>
      </contour>
      <contour>
        <pt x="876" y="705" on="1"/>
        <pt x="876" y="1010" on="0"/>
        <pt x="735" y="1284" on="0"/>
        <pt x="573" y="1284" on="1"/>
        <pt x="407" y="1284" on="0"/>
        <pt x="262" y="1014" on="0"/>
        <pt x="262" y="705" on="1"/>
        <pt x="262" y="405" on="0"/>
        <pt x="409" y="127" on="0"/>
        <pt x="569" y="127" on="1"/>
        <pt x="728" y="127" on="0"/>
        <pt x="876" y="411" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          18 6 12 0 6 0 24 25 9 15 115 89 9 7 3 21 115 89 3 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[1]	/* InterpolateUntPts */
          IUP[0]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Digitized data copyright (c) 2010 Google Corporation. 
Copyright (c) 2012 Red Hat, Inc.
    </namerecord>
    <namerecord nameID="1" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Liberation Sans
    </namerecord>
    <namerecord nameID="2" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Ascender - Liberation Sans
    </namerecord>
    <namerecord nameID="4" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Liberation Sans
    </namerecord>
    <namerecord nameID="5" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Version 2.00.1
    </namerecord>
    <namerecord nameID="6" platformID="1" platEncID="0" langID="0x0" unicode="True">
      LiberationSans
    </namerecord>
    <namerecord nameID="7" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Liberation is a trademark of Red Hat, Inc. registered in U.S. Patent and Trademark Office and certain other jurisdictions.
    </namerecord>
    <namerecord nameID="8" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Ascender Corporation
    </namerecord>
    <namerecord nameID="9" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Steve Matteson
    </namerecord>
    <namerecord nameID="10" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Based on Arimo, which was designed by Steve Matteson as an innovative, refreshing sans serif design that is metrically compatible with Arial™. Arimo offers improved on-screen readability characteristics and the pan-European WGL character set and solves the needs of developers looking for width-compatible fonts to address document portability across platforms.
    </namerecord>
    <namerecord nameID="11" platformID="1" platEncID="0" langID="0x0" unicode="True">
      http://www.ascendercorp.com/
    </namerecord>
    <namerecord nameID="12" platformID="1" platEncID="0" langID="0x0" unicode="True">
      http://www.ascendercorp.com/typedesigners.html
    </namerecord>
    <namerecord nameID="13" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Licensed under the SIL Open Font License, Version 1.1
    </namerecord>
    <namerecord nameID="14" platformID="1" platEncID="0" langID="0x0" unicode="True">
      http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Digitized data copyright (c) 2010 Google Corporation. 
Copyright (c) 2012 Red Hat, Inc.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Liberation Sans
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      Ascender - Liberation Sans
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Liberation Sans
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 2.00.1
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      LiberationSans
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Liberation is a trademark of Red Hat, Inc. registered in U.S. Patent and Trademark Office and certain other jurisdictions.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Ascender Corporation
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Steve Matteson
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      Based on Arimo, which was designed by Steve Matteson as an innovative, refreshing sans serif design that is metrically compatible with Arial™. Arimo offers improved on-screen readability characteristics and the pan-European WGL character set and solves the needs of developers looking for width-compatible fonts to address document portability across platforms.
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      http://www.ascendercorp.com/
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      http://www.ascendercorp.com/typedesigners.html
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      Licensed under the SIL Open Font License, Version 1.1
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://scripts.sil.org/OFL
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-217"/>
    <underlineThickness value="150"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="2"/>
    <gaspRange rangeMaxPPEM="17" rangeGaspBehavior="1"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="3"/>
  </gasp>

  <FFTM>
    <!-- FontForge's timestamp, font source creation and modification dates -->
    <version value="1"/>
    <FFTimeStamp value="Tue Jul 31 14:57:19 2012"/>
    <sourceCreated value="Fri Jun 18 10:23:22 2010"/>
    <sourceModified value="Wed Oct  3 13:32:25 2012"/>
  </FFTM>

</ttFont>
